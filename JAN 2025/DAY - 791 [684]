** 684. Redundant Connection **

# Approach 1:
class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        root = list(range(len(edges) + 1))

        def find_root(node):
            if root[node] != node:
                root[node] = find_root(root[node]) 
            return root[node] 

        for node1, node2 in edges: 
            root1, root2 = find_root(node1), find_root(node2)

            if root1 == root2:
                return [node1, node2] 
 
            root[root2] = root1          

# Approach 2:
class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        n = len(edges)
        parent = [i for i in range(n + 1)]
        rank = [0] * (n + 1)

        def find(i):
            if parent[i] != i:
                parent[i] = find(parent[i])
            return parent[i]

        def join(u, v):
            rootU = find(u)
            rootV = find(v)

            if rootU != rootV:
                if rank[rootU] > rank[rootV]:
                    parent[rootV] = rootU
                elif rank[rootU] < rank[rootV]:
                    parent[rootU] = rootV
                else:
                    parent[rootV] = rootU
                    rank[rootU] += 1

        for u, v in edges:
            if find(u) == find(v):
                return [u, v]
            join(u, v)

        return[]
