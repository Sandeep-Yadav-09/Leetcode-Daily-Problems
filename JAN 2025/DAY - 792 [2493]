** 2493. Divide Nodes Into the Maximum Number of Groups **

# Approach 1:
class Solution:
    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:

        def is_bipartite(node, c):
            color[node] = c
            components.append(node)
            for neighbor in graph[node]:
                if (not color[neighbor] and not is_bipartite(neighbor, -1*c)
                    or color[neighbor] == c):
                    return False
            return True

        def find_depth(root):
            visited = [0] * n
            que, visited[root], depth = deque([root]), 1, 0
            while que:
                for _ in range(len(que)):
                    for neighbor in graph[que.popleft()]:
                        if not visited[neighbor]:
                            que.append(neighbor)
                            visited[neighbor] = 1
                depth += 1
            return depth


        graph = [[] for _ in range(n)]
        for u, v in edges:
            graph[v-1].append(u-1)
            graph[u-1].append(v-1)

        ans, color = 0, [0] * n
        for node in range(n):
            if not color[node]:
                components = []
                if not is_bipartite(node, 1):
                    return -1
                ans += max(find_depth(node) for node in components)
        return ans

# Approach 2:
class Solution:
    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:
        graph = defaultdict(list)
        for a, b in edges:
            graph[a].append(b)
            graph[b].append(a)
        components = []
        seen = set()
        for i in range(1, n + 1):
            if i in seen:
                continue
            queue = deque([i])
            visited = set([i])
            while queue:
                for _ in range(len(queue)):
                    node = queue.popleft()
                    for neighbor in graph[node]:
                        if neighbor in visited:
                            continue
                        visited.add(neighbor)
                        queue.append(neighbor)
            components.append(visited)
            seen = seen.union(visited)
        longest = [-1] * len(components)        
        for k in range(len(components)):
            for i in components[k]:
                longest[k] = max(longest[k], self.bfs(graph, i))
        if min(longest) < 0:
            return -1
        return sum(longest)
            
    def bfs(self, graph, i):
        queue = deque([i])
        seen = set([i])
        seenLevel = set()
        ans = 0
        while queue:
            ans += 1
            nextLevel = set()
            for _ in range(len(queue)):
                node = queue.popleft()
                for neighbor in graph[node]:
                    if neighbor in seenLevel:
                        return -1
                    if neighbor in seen:
                        continue
                    seen.add(neighbor)
                    nextLevel.add(neighbor)
                    queue.append(neighbor)
            seenLevel = nextLevel
        return ans
