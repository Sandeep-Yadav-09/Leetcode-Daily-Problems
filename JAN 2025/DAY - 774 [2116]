** 2116. Check if a Parentheses String Can Be Valid **

# Approach 1:
class Solution:
    def canBeValid(self, s: str, locked: str) -> bool:
        n=len(s)
        if n&1==1: return False
        
        bMin, bMax=0, 0  
        
        for i, c in enumerate(s):
            op=c== '('
            wild=locked[i]=='0'
            
            if (not op) or wild: bMin-=1  
            else: bMin+=1  
            
            if op or wild: bMax+=1  
            else: bMax-=1  
            
            if bMax < 0: return False
            
            bMin = max(bMin, 0)
        
        return bMin==0

# Approach 2:
class Solution:
    def canBeValid(self, s: str, locked: str) -> bool:
        n = len(s)
        if n % 2 == 1:
            return False
        b = a = 0
        for i in range(n):
            b += 1 if locked[i] == '0' or s[i] == '(' else -1
            if b < 0:
                return False
            a += 1 if locked[n - i - 1] == '0' or s[n - i - 1] == ')' else -1
            if a < 0:
                return False
        return True
