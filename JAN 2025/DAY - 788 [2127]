** 2127. Maximum Employees to Be Invited to a Meeting **

# Approach 1:
class Solution:
    def maximumInvitations(self, favorite: List[int]) -> int:
        n = len(favorite)
        edges = [0] * n
        que = [0] * n
        chain_length = [0] * n 

        for i in range(n):
            edges[favorite[i]] += 1

        l, r = 0, 0
        for i in range(n):
            if edges[i] == 0:
                que[r] = i
                r += 1
        while l < r:
            curr = que[l]
            l += 1
            nxt_node = favorite[curr]
            chain_length[nxt_node] = max(chain_length[nxt_node], chain_length[curr] + 1)
            edges[nxt_node] -= 1
            if edges[nxt_node] == 0:
                que[r] = nxt_node
                r += 1
        sum_of_two_node_cycles = 0
        longest_cycle = 0
        for i in range(n):
            if edges[i] != 0: 
                edges[i] = 0  
                cycle_size = 1
                j = favorite[i]
                while j != i:
                    cycle_size += 1
                    edges[j] = 0
                    j = favorite[j]

                if cycle_size == 2:
                    sum_of_two_node_cycles += chain_length[i] + chain_length[favorite[i]] + 2
                else:
                    longest_cycle = max(longest_cycle, cycle_size)

        return max(longest_cycle, sum_of_two_node_cycles)

# Approach 2:
class Solution:
    def maximumInvitations(self, favorite: List[int]) -> int:
        n = len(favorite)
        indegree = [0] * n
        length = [0] * n
        for i, x in enumerate(favorite):
            indegree[x] += 1
        que = collections.deque([i for i in range(n) if indegree[i] == 0])
        while que:
            cur = que.popleft()
            nxt = favorite[cur]
            indegree[nxt] -= 1
            length[nxt] = max(length[nxt], length[cur] + 1)
            if indegree[nxt] == 0:
                que.append(nxt)
        smallring = 0
        bigring = 0
        for i in range(n):
            if indegree[i] > 0:
                size = 1
                indegree[i] -= 1
                nxt = favorite[i]
                while nxt != i:
                    indegree[nxt] -= 1
                    size += 1
                    nxt = favorite[nxt]
                if size == 2:
                    smallring += length[i] + length[favorite[i]] + 2
                else:
                    bigring = max(bigring, size)
        return max(smallring, bigring) 
