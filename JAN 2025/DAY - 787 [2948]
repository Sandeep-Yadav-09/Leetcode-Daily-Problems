** 2948. Make Lexicographically Smallest Array by Swapping Elements **

# Approach 1:
class Solution:
    def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:
        n, group = len(nums), 0
        pairs = sorted([[nums[i], i] for i in range(n)], key=lambda x: x[0])
        map = [0] * n
        sets = [[n - 1, n - 1]]
        for i in range(n - 2, -1, -1):
            if pairs[i + 1][0] - pairs[i][0] <= limit:
                sets[-1][0] = i
                map[pairs[i][1]] = group
            else:
                sets.append([i, i])
                group += 1
                map[pairs[i][1]] = group
        for i in range(n):
            key = map[i]
            nums[i] = pairs[sets[key][0]][0]
            sets[map[i]][0] += 1
        return nums

# Approach 2:
class Solution:
    def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:
        new=[]
        for i in range(len(nums)):
            new.append([nums[i],i])
        new=sorted(new,key=lambda x:x[0])
        new2d=[[new[0]]]
        for i in range(1,len(nums)):
            if new[i][0]-new[i-1][0]<=limit:
                new2d[-1].append(new[i])
            else:
                new2d.append([new[i]])
        for v in new2d:
            index=[]
            for m,n in v:
                index.append(n)
            index.sort()
            for i in range(len(index)):
                nums[index[i]]=v[i][0]
        return nums
