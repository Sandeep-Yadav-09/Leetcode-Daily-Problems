** 1857. Largest Color Value in a Directed Graph **

# Approach 1:
class Solution:
    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:
        graph = {}
        indeg = [0] * len(colors)
        for u, v in edges: 
            indeg[v] += 1
            graph.setdefault(u, []).append(v)
            
        # Kahn's algo
        roots = [x for x in range(len(colors)) if indeg[x] == 0]
        
        stack = roots.copy()
        nodes = []
        while stack: 
            x = stack.pop()
            nodes.append(x)
            for xx in graph.get(x, []):
                indeg[xx] -= 1
                if indeg[xx] == 0: stack.append(xx)
        if len(nodes) < len(colors): return -1 # cycle detected 
        
        @cache
        def fn(x): 
            """Return distribution of (maximized) colors at given node."""
            ans = [0]*26
            ans[ord(colors[x]) - 97] = 1
            for xx in graph.get(x, []): 
                val = fn(xx)
                for i in range(26): 
                    if i == ord(colors[x]) - 97: ans[i] = max(ans[i], 1 + val[i])
                    else: ans[i] = max(ans[i], val[i])
            return ans 
        
        ans = [0]*26 
        for root in roots: 
            val = fn(root)
            for i in range(26): ans[i] = max(ans[i], val[i])
        return max(ans)

# Approach 2:
class Solution(object):
    def largestPathValue(self, colors, edges):
        n=len(colors)
        graph=defaultdict(list)
        indegree=defaultdict(int)
        
        for u,v in edges:
            graph[u].append(v)
            indegree[v]+=1
        
        queue=[]    
        dp=[[0]*26 for _ in range(n)]
        colorvalues=[ord(c)-ord("a") for c in colors]
        for u in range(n):
            if u not in indegree:
                queue.append(u)
                dp[u][colorvalues[u]]=1
            
        visited=0
        while queue:
            u=queue.pop()
            visited+=1

            for v in graph[u]:
                for c in range(26):
                    dp[v][c]=max(dp[v][c],dp[u][c] + (c==colorvalues[v]))
                indegree[v]-=1
                if indegree[v]==0:
                    queue.append(v)
                    del indegree[v]
        if visited<n:
            return -1
        return max(max(x) for x in dp)

# Approach 3:
class Solution:
  def largestPathValue(self, colors, edges):
      n, k = len(colors), 26
      indegrees = [0] * n
      graph = [[] for _ in range(n)]
      for u, v in edges:
          graph[u].append(v)
          indegrees[v] += 1
      zero_indegree = set(i for i in range(n) if indegrees[i] == 0)
      counts = [[0] * k for _ in range(n)]
      for i, c in enumerate(colors):
          counts[i][ord(c) - ord('a')] += 1
      max_count, visited = 0, 0
      while zero_indegree:
          u = zero_indegree.pop()
          visited += 1
          for v in graph[u]:
              for i in range(k):
                  counts[v][i] = max(counts[v][i], counts[u][i] + (ord(colors[v]) - ord('a') == i))
              indegrees[v] -= 1
              if indegrees[v] == 0:
                  zero_indegree.add(v)
          max_count = max(max_count, max(counts[u]))
      return max_count if visited == n else -1
