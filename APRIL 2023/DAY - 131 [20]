** 20. Valid Parentheses **

# Approach 1:
class Solution:
    def isValid(self, s: str) -> bool:
        a = []
        d = {
            ')':'(',
            ']':'[',
            '}':'{'
        }
        for i in s:
            if i in d:
                if a and a[-1] == d[i]:
                    a.pop()
                else:
                    return False
            else:
                a.append(i)
        return True if not a else False

# Approach 2:
class Solution:
    def isValid(self, s: str) -> bool:
        # Create a pair of opening and closing parrenthesis...
        opcl = dict(('()', '[]', '{}'))
        # Create stack data structure...
        stack = []
        # Traverse each charater in input string...
        for idx in s:
            # If open parentheses are present, append it to stack...
            if idx in '([{':
                stack.append(idx)
            # If the character is closing parentheses, check that the same 
            # type opening parentheses is being pushed to the stack or not...
            # If not, we need to return false...
            elif len(stack) == 0 or idx != opcl[stack.pop()]:
                return False
        # At last, we check if the stack is empty or not...
        # If the stack is empty it means every opened parenthesis is being closed 
        # and we can return true, otherwise we return false...
        return len(stack) == 0
        
# Approach 3:
class Solution:
    def isValid(self, s: str) -> bool:
        while len(s) > 0:
            l = len(s)
            s = s.replace('()','').replace('{}','').replace('[]','')
            if l==len(s): return False
        return True
