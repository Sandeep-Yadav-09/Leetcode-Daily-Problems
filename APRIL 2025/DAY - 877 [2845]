** 2845. Count of Interesting Subarrays **

# Approach 1:
class Solution:
    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:
        res, p = 0, Counter({0:1})
        for q in accumulate(map(lambda v:v % modulo == k, nums)):
            res += p[(q-k)%modulo]
            p[q%modulo] += 1

        return res

# Approach 2:
class Solution:
    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:
        from collections import defaultdict
        n = len(nums)
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i + 1] = prefix[i] + (nums[i] % modulo == k)

        count = defaultdict(int)
        ans = 0
        for i in range(n + 1):
            j = prefix[i] - k
            ans += count[j%modulo]
            count[prefix[i] % modulo] += 1
        return ans
