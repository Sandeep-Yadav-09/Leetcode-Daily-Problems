** 2179. Count Good Triplets in an Array **

# Approach 1:
from sortedcontainers import SortedList
from typing import List

class Solution:
    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:

        index_map = {num: i for i, num in enumerate(nums2)}
  
        indices = [index_map[num] for num in nums1]

        left_counts = []
        left_sorted = SortedList()
        for idx in indices:
            left_counts.append(left_sorted.bisect_left(idx))
            left_sorted.add(idx)

        right_counts = []
        right_sorted = SortedList()
        for idx in reversed(indices):
            right_counts.append(len(right_sorted) - right_sorted.bisect_right(idx))
            right_sorted.add(idx)
        right_counts.reverse() 
        
        return sum(left * right for left, right in zip(left_counts, right_counts))

# Approach 2:
class BIT:
    def __init__(self, n):
        self.n = n
        self.tree = [0] * (n + 1)
    
    def update(self, i, delta):
        while i <= self.n:
            self.tree[i] += delta
            i += i & (-i)

    def query(self, i):
        s = 0
        while i:
            s += self.tree[i]
            i -= i & (-i)
        return s

class Solution:
    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        pos2 = [0] * n 
        for i, x in enumerate(nums2):
            pos2[x] = i

        M = [pos2[x] for x in nums1] 

        left, bit_left = [0] * n, BIT(n)
        for j in range(n):
            left[j] = bit_left.query(M[j])
            bit_left.update(M[j] + 1, 1)

        right, bit_right = [0] * n, BIT(n)
        for j in range(n - 1, -1, -1):
            right[j] = bit_right.query(n) - bit_right.query(M[j] + 1)
            bit_right.update(M[j] + 1, 1)
        
        good_triplets = 0
        for j in range(n):
            good_triplets += left[j] * right[j]

        return good_triplets
