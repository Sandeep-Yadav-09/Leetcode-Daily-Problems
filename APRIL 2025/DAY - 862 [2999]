** 2999. Count the Number of Powerful Integers **

# Approach 1:
class Solution:
    def numberOfPowerfulInt(self, start: int, finish: int, limit: int, s: str) -> int:
        def valid_less_then(num): 
            n = len(num) - len(s)
            if n < 0:
                return 0 

            dp = [[0, 0] for _ in range(n + 1)]
            dp[-1][0] = 1
            dp[-1][1] = int(s <= num[n:])

            for i in range(n - 1, -1, -1): 
                dp[i][0] = (1 + limit) * dp[i + 1][0]
                if int(num[i]) <= limit:
                    dp[i][1] = int(num[i]) * dp[i + 1][0] + dp[i + 1][1]
                else:
                    dp[i][1] = dp[i][0]

            return dp[0][1]
        
        return valid_less_then(str(finish)) - valid_less_then(str(start-1))

# Approach 2:
class Solution:
    def numberOfPowerfulInt(self, start: int, finish: int, l: int, s: str) -> int:
        cnt = [0] * 16
        def count(n : str, s: str) -> int:
            res, i, sz = cnt[len(n) - 1], 0, len(n) - len(s)
            while True:
                res += n[i:] >= s if i == sz else cnt[len(n) - i - 1] * (min(l, int(n[i]) - 1) + (i > 0))
                i += 1
                if i > sz or int(n[i - 1]) > l:
                    break
            return res            
        for i in range(len(s), 16):
            cnt[i] = 1 if i == len(s) else cnt[i - 1] * (l + 1)
        return count(str(finish), s) - count(str(start - 1), s)
