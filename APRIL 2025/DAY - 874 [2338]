** 2338. Count the Number of Ideal Arrays **

# Approach 1:
from collections import Counter
from math import comb

class Solution:
    def idealArrays(self, length: int, max_value: int) -> int:
        MOD = 1_000_000_007
        total_ways = max_value
        frequency_map = {num: 1 for num in range(1, max_value + 1)}
        
        for array_size in range(1, length): 
            new_frequency = Counter()
            for base_value in frequency_map: 
                for multiplier in range(2, max_value // base_value + 1): 
                    combinations = comb(length - 1, array_size)
                    total_ways += combinations * frequency_map[base_value]
                    new_frequency[multiplier * base_value] += frequency_map[base_value]
            frequency_map = new_frequency
            total_ways %= MOD
        
        return total_ways

# Approach 2:
class Solution:
    def idealArrays(self, n: int, maxValue: int) -> int:
        MOD = 10**9+7

        sieve = list(range(maxValue+1))
        for i in range(2, int(maxValue**0.5)+1):
            if sieve[i] == i: 
                for j in range(i*i, maxValue+1, i):
                    if sieve[j] == j: 
                        sieve[j] = i
        
        def factors(n):
            res = defaultdict(int)
            while n > 1:
                smallest_prime = sieve[n]
                res[smallest_prime] += 1
                n //= smallest_prime
            return res
        
        res = 0
        for i in range(1, maxValue+1):
            ways = 1
            for exp in factors(i).values():
                ways = (ways * math.comb(n - 1 + exp, exp)) % MOD
            res += ways % MOD
        return res % MOD
