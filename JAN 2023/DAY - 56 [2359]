** 2359. Find Closest Node to Given Two Nodes **

# Appraoch 1:
class Solution:    
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
            curr = [(node1,1),(node2,2)] 
            visited = [0]*len(edges)
            node = inf
            while curr:  
                new = []
                f = False
                for a,w in curr:
                    if visited[a]==0:
                        if edges[a]!=-1:
                            new.append((edges[a],w))
                        visited[a] = w
                    elif visited[a]!=w:
                        f = True
                        node = min(a,node)        
                if f:
                    return node       
                curr = new 
            return -1
            
# Approach 2:
class Solution:
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
        curr = [(node1,1),(node2,2)] #assuming both nodes are in curr
        visited = [0]*len(edges)
        ans = inf
        while curr:  # level wise BFS
            new = []
            f = False
            for a,w in curr:
                if visited[a]==0:
                    if edges[a]!=-1:
                        new.append((edges[a],w))
                    visited[a] = w
                elif visited[a]!=w: # we find our answer in this condition.no need to run while loop again
                    f = True
                    ans = min(a,ans)        
            if f:
                return ans       
            curr = new # assign next level array-> new to curr
        return -1
		
# Approach 3:
class Solution:
    def cdist(self, it, distArray, distArrayIndex, edges):
        rdist = 0 
        nodes = []
        while it != -1 and distArray[it][distArrayIndex] > rdist:
            distArray[it][distArrayIndex] = rdist
            nodes.append(it)
            it = edges[it]
            rdist += 1
        return nodes
            
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
        INF = float('inf')
        dist = defaultdict(lambda: [INF,INF])
        mmin, ans = INF, INF
               
        n = self.cdist(node1, dist, 0, edges)
        n += self.cdist(node2, dist, 1, edges)
                
        for k in n:
            m = max(dist[k])
            if m != INF:
                if m < mmin: 
                    mmin = m
                    ans = k
                elif m == mmin: 
                    ans = min(ans, k)
                    
        return ans if ans != float('inf') else -1
