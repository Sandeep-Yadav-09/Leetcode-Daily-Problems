** 2244. Minimum Rounds to Complete All Tasks **

# Approach 1:
class Solution:
    def minimumRounds(self, tasks: list[int]) -> int:
                                            # Example: tasks = [2,2,3,3,2,4,4,4,4,4,4,4]

        tasks = Counter(tasks)              #          tasks = {3:2, 2:3, 4:5}
        
        if 1 in tasks.values(): return -1   # <-- no solution if there's a singleton

        ans = 0                             # tasks.values() = [5, 3, 2]     
        for n in tasks.values():
            ans+= n//3 + bool(n%3)          # ans  = (3//3+False) + (2//3+True) + (4//3+True)
                                            #      = ( 1  +  0  ) + (  0 +  1 ) + (1   +  1 )
        return  ans                         #      = 4  <-- return
        
# Approach 2:
class Solution:
    def minimumRounds(self, tasks):
        freq = Counter(tasks).values()
        return -1 if 1 in freq else sum((a + 2) // 3 for a in freq)
        
# Approach 3:
from collections import Counter
class Solution:
    def minimumRounds(self, tasks: List[int]) -> int:
        cnt=Counter(tasks)
        sm=0
        for i in cnt:
            if cnt[i]==1:
                return -1
            x=cnt[i]//3
            y=cnt[i]%3
            if y==0:
                sm+=x
            else:
                sm+=(x+1)
        return sm
