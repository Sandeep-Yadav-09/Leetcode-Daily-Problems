** 93. Restore IP Addresses **

# Approach 1:
class Solution:
    def works(self, s):
        return s == str(int(s)) and int(s) <= 255

    def restoreIpAddresses(self, s: str) -> List[str]:
        n = len(s)
        ans = []
        for i in range(1, n):
            for j in range(i + 1, n):
                for k in range(j + 1, n):
                    a, b, c, d = s[:i], s[i:j], s[j:k], s[k:]
                    if self.works(a) and self.works(b) and self.works(c) and self.works(d):
                        ans.append(f'{a}.{b}.{c}.{d}')
        return ans
        
# Approach 2:
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        ans = []
        self.recurse(s, ans, 0, "", 0)
        return ans
    
    def recurse(self, curr, ans, index, temp, count):
        if count > 4:
            return
        if count == 4 and index == len(curr):
            ans.append(temp)
        for i in range(1, 4):
            if index + i > len(curr):
                break
            s = curr[index:index+i]
            if (s.startswith("0") and len(s) > 1) or (i == 3 and int(s) >= 256):
                continue
            self.recurse(curr, ans, index+i, temp + s + ("." if count < 3 else ""), count+1)
            
# Approach 3:
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        path = []
        result = []
        self.dfs(s, path, result)
        return result
    
    def dfs(self, s: str, path: List, result: List):
        
        if not s and len(path) == 4:
            s = '.'.join(path[::-1])
            result.append(s)
            return
        elif len(path) == 4: return 
        else:
            for i in range(1, min(3, len(s))+1):
                if int(s[:i]) >= 0 and int(s[:i]) <= 255:
                    if i > 1 and s[0]=='0': continue
                    else: self.dfs(s[i:], [s[:i]]+path, result)
            return
