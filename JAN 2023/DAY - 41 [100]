** 100. Same Tree **

#Approach 1:
class Solution:
    def preOrder(self,a,l):
        if not a:
            l.append(None)
        else:
            l.append(a.val)
            self.preOrder(a.left,l)
            self.preOrder(a.right,l)
        return l

    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        pl=self.preOrder(p,[])
        ql=self.preOrder(q,[])
        return(pl==ql)
        
# Approach 2:
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if not p or not q: return p == q
        if p.val != q.val: return False
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

# Approach 3:
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        stack = [(p, q)]
        while stack:
            n1, n2 = stack.pop()
            if not n1 and not n2: continue
            if not n1 or not n2: return n1 == n2
            if n1.val != n2.val: return False
            stack.append((n1.right, n2.right))
            stack.append((n1.left, n2.left))
        return True
