** **

# Approach 1:
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points = sorted(points)
        p = points[0][0]
        q = points[0][1]
        ans = 0
        for i,j in points:
            if p <= i <= q or p <= j <= q:
                p = max(i,p)
                q = min(j,q)
            else:
                ans += 1
                p = i
                q = j
        return ans + 1
        
# Approach 2:
class Solution:
    def findMinArrowShots(self, points: list[list[int]]) -> int:

        points.sort(key = lambda x: x[1])      # Example:  points = [[2,4],[1,6],[1,3],[7,8]]
                                               #      points.sort = [[1,3],[2,4],[1,6],[7,8]]
        tally, bow = 1, points[0][1]
                                               #                     ––––––– [7,9]
        for start, end in points:              #   ––––––––––––––––          [1,6] 
            if bow < start:                    #      –––––––                [2,4]
                bow = end                      #   –––––––                   [1,3]
                tally += 1                     #   1  2  3  4  5  6  7  8  9
                                               #         |                 |     
        return tally                           #     tally = 1         tally = 2
        
# Approach 3:
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        n=len(points)
        points = sorted(points, key = lambda x: x[1])
        maxa=-float('inf')
 
        ans=0

        for i in range(0,n):
            if maxa<points[i][0]:
                ans+=1
                maxa=points[i][1]

        return ans
