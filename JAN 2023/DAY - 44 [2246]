** 2246. Longest Path With Different Adjacent Characters **

# Approach 1:
class Solution:
    def longestPath(self, parent: List[int], s: str) -> int:
        t={}
        for i in range(1,len(parent)):
            if parent[i] not in t:
                t[parent[i]]=[i]
            else:
                t[parent[i]].append(i)
            
        self.ans=1
        def fun(i):
            if i not in t:
                return 1
            res = 1
            for j in t[i]:
                length=fun(j)
                if s[i] != s[j]:
                    self.ans = max(self.ans,length+res)
                    res = max(res,length+1)
            return res
        
        fun(0)
        return self.ans
        
# Approach 2:
class Solution:
    def longestPath(self, par: List[int], s: str) -> int:
        dit = {}
        # store tree in dictionary
        for i in range(len(par)):
            if par[i] in dit:
                dit[par[i]].append(i)
            else:
                dit[par[i]] = [i]
                
        ans = 1        
        def dfs(n):
            nonlocal ans
            if n not in dit:
                return 1
            
            largest=0 # largest path lenght among all children
            second_largest=0 # second largest path lenght among all children
            for u in dit[n]:
                curr = dfs(u)
                if s[u]!=s[n]: # pick child path if child and parent both have different value
                    if curr>largest:
                        second_largest = largest
                        largest = curr
                    elif curr>second_largest:
                        second_largest = curr
                        
            ans = max(ans,largest+second_largest+1) # largest path including parent with at most two children 
            
            return largest+1  # return largest path end at parent
        
        dfs(0)
        return ans
        
# Approach 3:
class Solution:
    def longestPath(self, par: List[int], label: str) -> int:
        n = len(par)
        adj = [[] for i in range(n)]
        
        for i in range(1, n):
            adj[par[i]].append(i)   
        vis = [0]*n 
        vis[0] = 1 
        
        queue = [0]
        q = 1 
        
        ans = 1 
        arr = [1]*n 
        
        while q > 0:
            s = queue[-1]
            
            leaf = True
            flag = True
            
            for z in adj[s]:
                leaf = False
                if not vis[z]:
                    flag = False
                    vis[z] = 1 
                    queue.append(z)
                    q += 1
                    
            if leaf:
                queue.pop()
                q -= 1
                continue 
                
            if flag:
                curr = []
                c = 0
                
                for z in adj[s]:
                    if label[z] != label[s]:
                        c += 1 
                        curr.append(arr[z])
                        
                if c > 1:
                    curr.sort()
                    a, b = curr[-1], curr[-2]
                    
                    ans = max(ans, a+b+1)

                    mx = a 
                elif c == 1:
                    mx = curr[0] 
                else:
                    mx = 0 
                    
                arr[s] = mx+1 
                
                ans = max(ans, arr[s])
                
                queue.pop()
                q -= 1
        return ans
