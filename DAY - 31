** 980. Unique Paths III **

# Approach 1:
class Solution:
     def uniquePathsIII(self, grid: list[list[int]]) -> int:

        M, N = range(len(grid)), range(len(grid[0]))

        zeros = sum(row.count(0) for row in grid)       # count the zeros to ensure all cells visited
        start = tuple((r,c) for r in M for c in N       # find start in grid
                           if grid[r][c] == 1)[0]
        self.ans = 0

        def dfs(row, col, zeros):
            grid[row][col] = 3                          # change 0 to 3 to avoid returning

            for dr, dc in ((-1,0),(0,-1),(1,0),(0,1)):  # explore the grid recursively
                R, C = row+dr, col+dc
                if R in M and C in N:
                    if grid[R][C] == 0: dfs(R, C, zeros-1)
                    if grid[R][C] == 2 and zeros == 0: self.ans += 1

            grid[row][col] = 0                          # change back
            return

        dfs(*start, zeros)
        return self.ans
        
# Approach 2:
class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        start_row, start_col, end_row, end_col = 0,0,0,0
        empty = 0
        for r in range(m):
            for c in range(n):
                if grid[r][c] == 1:
                    start_row, start_col = r,c
                elif grid[r][c] == 2:
                    end_row, end_col = r,c
                elif grid[r][c] == 0:
                    empty += 1
        self.output = 0
        visited = set()
        def dfs(r,c,visited, walk):
            if r==end_row and c==end_col:
                if walk==empty+1:
                    self.output+=1
                return
            
            if 0<=r<m and 0<=c<n and grid[r][c] !=-1 and (r,c) not in visited:
                visited.add((r,c))
                for i,j in [(0,-1),(0,1),(1,0),(-1,0)]:
                    dfs(r+i,c+j,visited,walk+1)
                visited.remove((r,c))
        dfs(start_row, start_col, visited, 0)

        return self.output
