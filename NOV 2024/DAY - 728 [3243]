** 3243. Shortest Distance After Road Addition Queries I **

# Approach 1:
import heapq
from collections import defaultdict

class Solution:
    def dijkstra(self, n, adj, src, dest):
        dist = [float('inf')] * n
        dist[src] = 0
        pq = [(0, src)]

        while pq:
            d, u = heapq.heappop(pq)

            for v, weight in adj[u]:
                if dist[u] + weight < dist[v]:
                    dist[v] = dist[u] + weight
                    heapq.heappush(pq, (dist[v], v))

        return -1 if dist[dest] == float('inf') else dist[dest]

    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        adj = defaultdict(list)
        for i in range(n - 1):
            adj[i].append((i + 1, 1))

        ans = []
        for u, v in queries:
            adj[u].append((v, 1))
            ans.append(self.dijkstra(n, adj, 0, n - 1))

        return ans

# Approach 2:
class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        
        dic = {end: [end-1] for end in range(1, n)} # add the original 1-step arrow
        res = []

        for j in range(len(queries)):
            dp = [0 if i == 0 else n for i in range(n)]

            dic[queries[j][1]].append(queries[j][0])

            for i in range(1, n):
                for start in dic[i]:
                    dp[i] = min(dp[i], dp[start]+1)
            res.append(dp[-1])
        return res
