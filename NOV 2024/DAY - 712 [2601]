** 2601. Prime Subtraction Operation **

# Approach 1:
import bisect

class Solution:
    def primeSubOperation(self, nums: List[int]) -> bool:
        if nums == sorted(nums) and len(set(nums)) == len(nums):
            return True
        def sieve_of_eratosthenes(limit):
            is_prime = [True] * (limit + 1)
            is_prime[0], is_prime[1] = False, False  
            for num in range(2, int(limit ** 0.5) + 1):
                if is_prime[num]:
                    for multiple in range(num * num, limit + 1, num):
                        is_prime[multiple] = False
            primes = [num for num in range(2, limit + 1) if is_prime[num]]
            return primes
        arr = sieve_of_eratosthenes(1000)
        for i in range(len(nums)):
            if i == 0:
                ind = bisect.bisect_left(arr,nums[i])
                if ind == 0:
                    continue
                nums[i] -= arr[ind-1]
            else:
                if nums[i] <= nums[i-1]:
                    return False
                val = nums[i] - nums[i-1]
                ind = bisect.bisect_left(arr,val)
                if ind == 0:
                    continue
                nums[i] -= arr[ind-1]
        if nums == sorted(nums):
            return True
        return False

# Approach 2:
class Solution:
    def primeSubOperation(self, nums: List[int]) -> bool:
        primes = sorted([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,
                         101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,
                         197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,
                         311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,
                         431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,
                         557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,
                         661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
                         809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,
                         937, 941, 947, 953, 967, 971, 977, 983, 991, 997])
        for i in range(len(nums)):
            a = 0
            if i == 0:
                for prime in primes:
                    if nums[i] > prime:
                        a = prime
                    else:
                        break
                nums[i] -= a
            else:
                for prime in primes:
                    if nums[i] - prime > nums[i - 1]:
                        a = prime
                    else:
                        break
                nums[i] -= a
        print(nums)
        return nums == sorted(nums) and len(nums) == len(set(nums))
