** 1574. Shortest Subarray to be Removed to Make Array Sorted **

# Approach 1:
class Solution:
    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:
        n = len(arr)
        
        left = 0
        while left + 1 < n and arr[left] <= arr[left + 1]:
            left += 1
        
        if left == n - 1:
            return 0
        
        right = n - 1
        while right > 0 and arr[right - 1] <= arr[right]:
            right -= 1
        
        result = min(n - left - 1, right)

        i, j = 0, right

        while i <= left and j < n:
            if arr[i] <= arr[j]:
                result = min(result, j - i - 1)
                i += 1
            else:
                j += 1
        
        return result

# Approach 2:
class Solution:
    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:
        lower,upper=0,len(arr)-1
        while lower<len(arr)-1 and arr[lower]<=arr[lower+1]:lower+=1
        while upper>0 and arr[upper-1]<=arr[upper]:upper-=1
        
        lo , hi =0,len(arr)
        while lo <=hi:
            mid = lo + hi >> 1
            for i in range(len(arr)-mid+1):
                if  (i+mid >=len(arr) or i-1 <0 or arr[i-1] <= arr[i+mid]) and i-1 <=lower and i+mid>=upper:
                    hi=mid-1
                    break
            else:
                lo=mid+1
        return lo
