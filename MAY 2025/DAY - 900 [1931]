** 1931. Painting a Grid With Three Different Colors **

# Approach 1:
class Solution:
    def colorTheGrid(self, m: int, n: int) -> int:
        pat = []
        col = [0, 1, 2]
        def dfs(x, s):
            if x == m:
                pat.append(s)
                return
            for i in col:
                if x == 0 or s[x - 1] != i:
                    dfs(x + 1, s + [i])
        dfs(0, [])

        l = len(pat)
        valid = [[True for _ in range(l)] for _ in range(l)]

        for i in range(l):
            for j in range(i + 1, l):
                for k in range(m):
                    if pat[i][k] == pat[j][k]:
                        valid[i][j] = False
                        break
        
        dp = [[0 for _ in range(l)] for _ in range(n)]
        mod = 1_000_000_007
        for i in range(l):
            dp[0][i] = 1

        for i in range(1, n):
            for x in range(l):
                for y in range(x + 1, l):
                    if valid[x][y]:
                        dp[i][x] = (dp[i][x] + dp[i-1][y]) % mod
                        dp[i][y] = (dp[i][y] + dp[i-1][x]) % mod
        
        ans = 0
        for i in range(l):
            ans = (ans + dp[-1][i]) % mod

        return ans

# Approach 2:
class Solution:
    def colorTheGrid(self, m: int, n: int) -> int:
        mod: int = 10**9 + 7
        valid: dict[int, list[int]] = dict()
        for mask in range(3**m):
            color: list[int] = list()
            mm: int = mask
            for i in range(m):
                color.append(mm % 3)
                mm //= 3
            if any(color[i] == color[i + 1] for i in range(m - 1)): continue
            valid[mask] = color
        adjacent: dict[int, list[int]] = defaultdict(list)
        for mask1, color1 in valid.items():
            for mask2, color2 in valid.items():
                if not any(x == y for x, y in zip(color1, color2)): adjacent[mask1].append(mask2)
        f: list[int] = [int(mask in valid) for mask in range(3**m)]
        for i in range(1, n):
            g: list[int] = [0] * (3**m)
            for mask2 in valid.keys():
                for mask1 in adjacent[mask2]:
                    g[mask2] += f[mask1]
                    if g[mask2] >= mod: g[mask2] -= mod
            f = g
        return sum(f) % mod
