** 3341. Find Minimum Time to Reach Last Room I **

# Approach 1:
class Solution:
    def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        m, n = len(moveTime), len(moveTime[0])
        min_time = [[inf]*n for _ in range(m)]
        min_time[0][0] = 0
        heap = [(0, 0, 0)] 
        while heap:
            t, i, j = heappop(heap)
            if i == m-1 and j == n-1:
                return t
            if t == min_time[i][j]:
                for ii, jj in (i-1, j), (i+1, j), (i, j-1), (i, j+1):
                    if 0 <= ii < m and 0 <= jj < n:
                        tt = max(t, moveTime[ii][jj]) + 1
                        if min_time[ii][jj] > tt:
                            min_time[ii][jj] = tt
                            heappush(heap, (tt, ii, jj))

# Approach 2:
class Solution:
    def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        R, C = len(moveTime), len(moveTime[0])
        def isOutside(i, j):
            return i < 0 or i >= R or j < 0 or j >= C
        def idx(i, j):
            return i * C + j
        N = R * C
        time = [2**31] * N
        pq = [0]
        time[0] = 0
        while len(pq):
            tij = heappop(pq)
            t, ij = tij >> 32, tij & ((1 << 30) - 1)
            i, j = divmod(ij, C)
            if i == R - 1 and j == C - 1:
                return t
            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                r, s = i + di, j + dj
                if isOutside(r, s):
                    continue
                nextTime=max(t, moveTime[r][s])+1

                rs = idx(r, s)
                if nextTime < time[rs]:
                    time[rs] = nextTime
                    heappush(pq, (nextTime << 32) + rs)
        return -1
