** 2359. Find Closest Node to Given Two Nodes **

# Approach 1:
class Solution:
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
        n = len(edges)
        inf = 1<<32
        dist1, dist2 = [inf]*n, [inf]*n

        def dfs(node, dist):
            d, i = 0, node
            while i != -1 and dist[i] == inf:
                dist[i] = d
                d += 1
                i = edges[i]
        dfs(node1, dist1)
        dfs(node2, dist2)
        minD, index = inf, -1
        for i in range(n):
            max12=max(dist1[i], dist2[i])
            if max12 < minD: 
                minD = max12
                index = i
        return index

# Approach 2:
class Solution:
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
        n = len(edges)
        dist1, d, curr = [-1] * n, 0, node1
        while curr != -1 and dist1[curr] == -1:
            dist1[curr] = d
            d += 1
            curr = edges[curr]

        best, res = float('inf'), -1
        seen, d, curr = [False] * n, 0,  node2
        while curr != -1 and not seen[curr]:
            seen[curr] = True
            if dist1[curr] != -1:
                m = max(dist1[curr], d)
                if m < best or (m == best and curr < res):
                    best, res = m, curr
            d += 1
            curr = edges[curr]

        return res
