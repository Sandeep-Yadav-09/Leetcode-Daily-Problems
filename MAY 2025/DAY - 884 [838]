** 838. Push Dominoes **

# Approach 1:
class Solution:
    def pushDominoes(self, dominoes: str) -> str:
        s = 'L' + dominoes + 'R'
        prev, result, n = 0, list(s), len(s)  
        for i in range(1, n):
            if s[i] == '.': continue
            if i - prev > 1:
                if s[prev] == s[i]:  
                    for k in range(prev + 1, i):
                        result[k] = s[i]
                elif s[prev] == 'R' and s[i] == 'L': 
                    l, r = prev + 1, i - 1
                    while l < r:
                        result[l] = 'R'
                        result[r] = 'L'
                        l += 1
                        r -= 1
            prev = i

        return ''.join(result[1:-1])

# Approach 2:
class Solution:
    def pushDominoes(self, dominoes: str) -> str:
        def flushStack():
            if not isPresentR:
                res.extend(stack)
            else:
                for i in range(len(stack)):
                    res.append('R')
            stack.clear()

        res = []

        stack = []
        isPresentR = False
        for domino in dominoes:
            if domino == '.':
                stack.append('.')
                continue

            if domino == 'L':
                stack.append('L')

                if not isPresentR:
                    for i in stack:
                        res.append('L')
                else: 
                    for i in range(len(stack)//2):
                        res.append('R')
                    if len(stack) % 2 != 0:
                        res.append('.')
                    for i in range(len(stack)//2):
                        res.append('L')
                    isPresentR = False

                stack.clear()

            if domino == 'R':
                flushStack()
                stack.append('R')
                isPresentR = True

        flushStack()

        return "".join(res)
