** 264. Ugly Number II **

# Approach 1:
class Solution:
    def nthUglyNumber(self, n: int) -> int:
        k = [0] * n
        t1 = t2 = t3 = 0
        k[0] = 1
        for i in range(1,n):
            k[i] = min(k[t1]*2,k[t2]*3,k[t3]*5)
            if(k[i] == k[t1]*2): t1 += 1
            if(k[i] == k[t2]*3): t2 += 1
            if(k[i] == k[t3]*5): t3 += 1
        return k[n-1]

# Approach 2:
class Solution:
    def nthUglyNumber(self, n: int) -> int:
        min_heap = []
        min_heap.append(1) 
        vis = {1}
        factors = [2, 3, 5]
        curr_ugly = 0

        for i in range(n):
            curr_ugly = heapq.heappop(min_heap)
            for num in factors:
                new = curr_ugly * num
                if new not in vis:
                    vis.add(new)
                    heapq.heappush(min_heap, new)
        
        return curr_ugly
