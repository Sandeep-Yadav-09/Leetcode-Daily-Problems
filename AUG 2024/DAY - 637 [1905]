** 1905. Count Sub Islands **

# Approach 1:
class Solution:
    l,w = 1,0
    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        m, n = len(grid1), len(grid1[0])

        for i in range(m):
            for j in range(n):
                if grid2[i][j] == self.l and grid1[i][j] == self.w:
                    self.sink_island(i, j, grid2)

        islands = 0
        for i in range(m):
            for j in range(n):
                if grid2[i][j] == self.l:
                    self.sink_island(i, j, grid2)
                    islands += 1

        return islands

    @classmethod
    def sink_island(cls, row: int, col: int, grid: List[List[int]]):
        if grid[row][col] == cls.l:
            grid[row][col] = cls.w
            if row > 0:
                cls.sink_island(row - 1, col, grid)
            if row < len(grid) - 1:
                cls.sink_island(row + 1, col, grid)
            if col < len(grid[0]) - 1:
                cls.sink_island(row, col + 1, grid)
            if col > 0:
                cls.sink_island(row, col - 1, grid)

# Approach 2:
class Solution:
    def countSubIslands(self, back: List[List[int]], grid: List[List[int]]) -> int:
        m=len(grid)
        n=len(grid[0])
        res=0
        test=True
        def dfs(i,j):
            nonlocal test
            if grid[i][j]==1:
                if back[i][j] != 1:
                    test=False
                grid[i][j]=0
                if j<n-1:
                    dfs(i,j+1)
                if j>0:
                    dfs(i,j-1)
                if i>0:
                    dfs(i-1,j)
                if i<m-1:
                    dfs(i+1,j)
        for i in range(m):
            for j in range(n):
                if grid[i][j]==1:
                    
                    test=True
                    dfs(i,j)
                    if test :
                        res+=1
        return res
