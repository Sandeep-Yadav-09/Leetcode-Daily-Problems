** 1508. Range Sum of Sorted Subarray Sums **

# Approach 1:
class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        arr = []
        i = 0
        while i < n:
            prefix = 0
            for j in range(i,n):
                prefix += nums[j]
                arr.append(prefix)
            i += 1
        arr.sort()
        return sum(arr[left-1:right]) % 1000000007

# Approach 2:
class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i + 1] = prefix[i] + nums[i]
        
        minHeap = []

        for i in range(1, n + 1):
            for j in range(i):
                heapq.heappush(minHeap, prefix[i] - prefix[j])
        
        result = 0
        for i in range(1, right + 1):
            sum_value = heapq.heappop(minHeap)
            if i >= left:
                result = (result + sum_value) % 1000000007
        
        return result
