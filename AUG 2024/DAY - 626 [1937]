** 1937. Maximum Number of Points with Cost **

# Approach 1:
class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        m, n = len(points), len(points[0])
        for i in range(m - 1):
            for j in range(1, n):
                points[i][j] = max(points[i][j], points[i][j - 1] - 1)
            for j in range(n - 2, -1, -1):
                points[i][j] = max(points[i][j], points[i][j + 1] - 1)
            for j in range(n):
                points[i + 1][j] += points[i][j]   
        return max(points[m - 1])

# Approach 2:
class Solution:
    def maxPoints(self, points):
        m, n = len(points), len(points[0])

        @lru_cache(None)
        def dfs(i,j):
            if i == m-1:
                return points[i][j]

            return points[i][j] + max(best_left(i+1,j),best_right(i+1,j))

        @lru_cache(None)
        def best_left(i,j):
            if j == 0:
                return dfs(i,j)
            return max(dfs(i,j),best_left(i,j-1)-1)

        @lru_cache(None)
        def best_right(i,j):
            if j == n-1:
                return dfs(i,j)
            return max(dfs(i,j),best_right(i,j+1)-1)

        return max([dfs(0,j) for j in range(n)])
