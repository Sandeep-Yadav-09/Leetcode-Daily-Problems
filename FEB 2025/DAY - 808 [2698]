** 2698. Find the Punishment Number of an Integer **

# Approach 1:
class Solution:
    def canPartition(self, s: str, target: int) -> bool:
        if s == "" and target == 0:
            return True
        if target < 0:
            return False
        ans = False
        for i in range(len(s)):  
            left = s[: i + 1]  
            right = s[i + 1 :]  
            leftNum = int(left)

            isPossible = self.canPartition(right, target - leftNum)
            if isPossible:
                ans = True
                break
        return ans

    def punishmentNumber(self, n: int) -> int:
        sum_ = 0
        for num in range(1, n + 1):
            sqr = num * num
            if self.canPartition(str(sqr), num):
                sum_ += sqr
        return sum_

# Approach 2:
class Solution:
    def punishmentNumber(self, n: int) -> int:
        s = 0

        def dfs(s, start_idx, num_left, n):
            if start_idx == n and num_left == 0:
                return True
            elif num_left < 0:
                return False
            
            left_num = 0
            for i in range(start_idx, n):
                left_num = left_num * 10 + int(s[i])
                if dfs(s, i + 1, num_left - left_num, n):
                    return True
            
            return False


        for i in range(1, n + 1):
            squaredI = i * i
            s += squaredI if dfs(str(squaredI), 0, i, len(str(squaredI))) else 0
            
        return s
