** 1718. Construct the Lexicographically Largest Valid Sequence **

# Approach 1:
class Solution:
    def constructDistancedSequence(self, n: int) -> List[int]:
        arr = [-1] * (2 * n - 1)
        used = [False for _ in range(n)]

        def dfs(idx):
            if all(used):
                return True
            if idx >= 2 * n - 1:
                return False
            if arr[idx] != -1:
                return dfs(idx + 1)

            for num in range(n - 1, -1, -1):
                if used[num] == True:
                    continue
                
                if num == 0:
                    used[num] = True
                    arr[idx] = 1
                    if dfs(idx + 1):
                        return True
                    used[num] = False
                    arr[idx] = -1
                    return False

                if idx + num + 1 >= 2 * n - 1:
                    return False
                if arr[idx + num + 1] != -1:
                    continue

                arr[idx] = num + 1  
                arr[idx + num + 1] = num + 1
                used[num] = True
                if dfs(idx + 1):
                    return True
                used[num] = False
                arr[idx + num + 1] = -1
            arr[idx] = -1
            return False

        dfs(0)
        return arr

# Approach 2:
class Solution:
    def constructDistancedSequence(self, n: int) -> List[int]:

        def backtrack(idx1 = 0): 

            if not unseen: return True

            if ans[idx1]: return backtrack(idx1+1)

            for num in reversed(range(1,n+1)):

                idx2 = idx1 + num if num != 1 else idx1

                if num in unseen and idx2 < n+n-1 and not ans[idx2]:
                    ans[idx1] = ans[idx2] = num
                    unseen.remove(num)

                    if backtrack(idx1+1): return True
                    ans[idx1] = ans[idx2] = 0
                    unseen.add(num)

            return False


        ans, unseen = [0]*(n+n-1), set(range(1,n+1))

        backtrack()

        return ans
