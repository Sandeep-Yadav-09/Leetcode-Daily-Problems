** 826. Most Profit Assigning Work **

# Approach 1:
class Solution:
    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        jobs = sorted(zip(difficulty, profit))
        
        worker.sort()
        
        max_profit = 0
        best = 0
        i = 0
        n = len(jobs)
        
        for ability in worker:
            while i < n and jobs[i][0] <= ability:
                best = max(best, jobs[i][1])
                i += 1
            max_profit += best
        
        return max_profit
          
# Approach 2:
          import bisect

class Solution:
    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        difficultyProfit = list(zip(difficulty, profit))
        difficultyProfit.sort()

        difficulty, profit = zip(*difficultyProfit)

        n = len(profit)
        dp = [0] * n
        for i in range(n):
            dp[i] = max(profit[i], dp[i - 1])

        result = 0
        for w in worker:
            index = bisect.bisect_right(difficulty, w) - 1
            if index < 0:
                continue
            
            result += dp[index]
        
        return result
