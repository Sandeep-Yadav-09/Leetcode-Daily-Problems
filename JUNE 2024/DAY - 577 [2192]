** 2192. All Ancestors of a Node in a Directed Acyclic Graph **

# Approach 1:
class Solution:
    def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:

        ans = [[] for _ in range(n)]

        g = defaultdict(list)

        for u, v in edges:
            g[v].append(u)
        
        def dfs(node, curr):
            for v in g[curr]:
                if v not in ans[node]:
                    dfs(node, v)
                    ans[node].append(v)  
        
        for i in range(n):
            dfs(i,i)

        for k in ans:
            k.sort()
            
        return ans 

# Approach 2:
class Solution:
    def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        ans = [[] for _ in range(n)]
        
        graph = defaultdict(list)
        for f, t in edges:
            graph[t].append(f)
        
        memo = defaultdict(list)
        def dfs(src):
            if src in memo:
                return memo[src]
            
            for nei in graph[src]:
                memo[src] += [nei]+dfs(nei)
            
            memo[src] = list(set(memo[src]))
            return memo[src]
        
        for i in range(n):
            dfs(i)
        return [sorted(memo[i]) for i in range(n)]
