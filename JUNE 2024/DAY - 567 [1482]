** 1482. Minimum Number of Days to Make m Bouquets **

# Approach 1:
class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        if len(bloomDay) < m * k: return -1

        def isEnoughDays(days):
            flowers, bouquets = 0, 0
            for d in bloomDay:
                flowers = flowers + 1 if d <= days else 0
                if flowers == k:
                    bouquets += 1
                    if bouquets == m: break
                    flowers = 0
            
            return bouquets == m

        l, r = 1, max(bloomDay)
        while l < r:
            days = l + (r-l) // 2
            if isEnoughDays(days):
                r = days
            else:
                l = days + 1
        
        return l     

# Approach 2:class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        ans = -1
        start, end = 0, max(bloomDay)

        def numberOfBouquets(bloomDay, mid, k):
            ans, cnt = 0, 0

            for day in bloomDay:
                if day <= mid:
                    cnt += 1
                else:
                    cnt = 0

                if cnt == k:
                    ans += 1
                    cnt = 0
            return ans

        while start <= end:
            mid = (start + end) // 2

            if numberOfBouquets(bloomDay, mid, k) >= m:
                ans = mid
                end = mid - 1
            else:
                start = mid + 1

        return ans
