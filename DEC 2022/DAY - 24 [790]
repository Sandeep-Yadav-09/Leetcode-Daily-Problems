** 790. Domino and Tromino Tiling **

# Approach 1:
class Solution:
    def numTilings(self,n:int)->int:                            # Example:  n = 5

        prev, curr, tri = 1, 1, 0                               #  n   prev  curr  tri 
                                                                # ---  ----  ----  ----
        for n in range(1,n):                                    #         1     1     0
                                                                #   2     1     2     1
            prev, curr, tri = curr, prev+curr+2*tri, prev+tri   #   3     1     2     2
                                                                #   4     1     2     4
        return curr%1000000007                                  #   5    11    24     9
                                                                #              / 
                                                                #           return
                                                                
# Approach 2:
class Solution:
    def numTilings(self, n: int) -> int:
        g = [0]*1001
        u = [0]*1001
        mod = 1000000007

        g[0],g[1],g[2] = 0,1,2
        u[0],u[1],u[2] = 0,1,2

        for i in range(3,n+1): 
            u[i] = (u[i-1] + g[i-1]) % mod
            g[i] = (g[i-1] + g[i-2] + 2*u[i-2]) % mod
        
        return g[n] % mod
        
# Approach 3:
# Using DP :
class Solution:
    def numTilings(self, n: int) -> int:
        #edge case
        if n == 1:
            return 1
        
        mod = 10 ** 9 + 7
        dp_full = [0 for _ in range(n)]
        dp_incomp = [0 for _ in range(n)]
        
        dp_full[0] = 1
        dp_full[1] = 2
        dp_incomp[1] = 2
        
        for i in range(2, n):
            dp_full[i] = dp_full[i - 2] + dp_full[i - 1] + dp_incomp[i - 1]
            dp_incomp[i] = dp_full[i - 2] * 2 + dp_incomp[i - 1]
        
        return dp_full[-1] % mod  
