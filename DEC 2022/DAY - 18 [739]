** 739. Daily Temperatures **

# Approach 1 :
class Solution:
    def dailyTemperatures(self, T: List[int]) -> List[int]:
        stack = []
        res = [0]*len(T)
        for i,temperature in enumerate(T):
            while stack and temperature > T[stack[-1]]:
                index = stack.pop()
                res[index] = i - index
            stack.append(i)     
        return res
        
# Approach 2 :
class Solution:
    def dailyTemperatures(self, T: List[int]) -> List[int]:
        res, stack = [0] * len(T), []
        for i in range(len(T)):
            while stack and T[stack[-1]] < T[i]:
                res[stack.pop()] = i - stack[-1]
            stack.append(i)
        return res
        
# Approach 3:
   # stack maintain temporarily (temperature,index) which did not found higher temperature at current i
    def dailyTemperatures(self, T: List[int]) -> List[int]:
        stack = []
        res = [0]*len(T)
        for i,temperature in enumerate(T):
            if not stack:
                stack.append((temperature,i))
            else:
                while stack and temperature > stack[-1][0]:
                    tmp,index = stack.pop()
                    res[index] = i - index
                stack.append((temperature,i))           
        return res
        
# Approach 4 :
 def dailyTemperatures(self, T):
    #initialize the result array with all '0's considering when there is no bigger temperature
    ans = [0]*len(T) 
    stack = []
    
    for i,v in enumerate(T):
        #check whether current val is greater than the last appended stack value.  We will pop all the elements which is lesser than the current temp
        while stack and stack[-1][1] < v:
            index,value = stack.pop()
            ans[index] = i - index # we are checking how many indices we have crossed since we last have a lesser temperature
		#Remember since we are comparing all the stack elements before inserting,all the stack elements will have temperatures greater than the current value	
        stack.append([i,v])      
    
    return ans
        
