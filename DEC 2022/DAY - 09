** 1026. Maximum Difference Between Node and Ancestor **

# Approach 1:
class Solution:
    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        def dfs(root, mn, mx):
            # Base Case: If we reach None, just return 0 in order not to affect the result
            if not root: return 0
            
			# The best difference we can do using the current node can be found:
            res = max(abs(root.val - mn), abs(root.val - mx))
			
			# Recompute the new minimum and maximum taking into account the current node
            mn, mx = min(mn, root.val), max(mx, root.val)
			
			# Recurse left and right using the newly computated minimum and maximum
            return max(res, dfs(root.left, mn, mx), dfs(root.right, mn, mx))
        
        # Initialize minimum `mn` and maximum `mx` equals value of given root
        return dfs(root, root.val, root.val)
	
# Approach 2:
class Solution:
    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        self.res = 0
        def ch(curr, cur_min, cur_max):
            if not curr:
                return
            self.res = max(self.res, abs(cur_min - curr.val), abs(cur_max - curr.val))
            cur_min = min(cur_min,curr.val)
            cur_max = max(cur_max,curr.val)
            ch(curr.left, cur_min, cur_max)
            ch(curr.right, cur_min, cur_max)
        ch(root, root.val, root.val)
        return self.res
