** 232. Implement Queue using Stacks **

# Approach 1:
class MyQueue:

    def __init__(self):
        self.s1 = []
        self.s2 = []

    def push(self, x: int) -> None:
        self.s1.append(x)

    def pop(self) -> int:
        while self.s1:
            self.s2.append(self.s1.pop())
        ans = self.s2.pop()
        while self.s2:
            self.s1.append(self.s2.pop())
        return ans

    def peek(self) -> int:
        while self.s1:
            self.s2.append(self.s1.pop())
        ans = self.s2[-1]
        while self.s2:
            self.s1.append(self.s2.pop())
        return ans

    def empty(self) -> bool:
        if not self.s1 and not self.s2:
            return True

# Approach 2:
class MyQueue(object):
    def __init__(self):
        self.in_stk = []
        self.out_stk = []
        
	# Push element x to the back of queue...
    def push(self, x):
        self.in_stk.append(x)

	# Remove the element from the front of the queue and returns it...
    def pop(self):
        self.peek()
        return self.out_stk.pop()

	# Get the front element...
    def peek(self):
        if not self.out_stk:
            while self.in_stk:
                self.out_stk.append(self.in_stk.pop())
        return self.out_stk[-1]

	# Return whether the queue is empty...
    def empty(self):
        return not self.in_stk and not self.out_stk
