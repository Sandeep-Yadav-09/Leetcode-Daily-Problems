** 1834. Single-Threaded CPU **

# Approach 1:
class Solution:
    def getOrder(self, tasks: List[List[int]]) -> List[int]:
        res = []
        tasks = sorted([(t[0], t[1], i) for i, t in enumerate(tasks)])
        i = 0
        h = []
        time = tasks[0][0]
        while len(res) < len(tasks):
            while (i < len(tasks)) and (tasks[i][0] <= time):
                heapq.heappush(h, (tasks[i][1], tasks[i][2])) # (processing_time, original_index)
                i += 1
            if h:
                t_diff, original_index = heapq.heappop(h)
                time += t_diff
                res.append(original_index)
            elif i < len(tasks):
                time = tasks[i][0]
        return res
        
# Approach 2:
def getOrder(self, tasks: List[List[int]]) -> List[int]:
        arr = []
        prev = 0
        output  = [] 
        tasks= sorted((tasks,i) for i,tasks in enumerate(tasks))
        for (m,n), i in tasks:
            while arr and prev < m:
                p,j,k = heappop(arr)
                prev = max(k,prev)+p
                output.append(j)
            heappush(arr,(n,i,m))
        return output+[i for _, i, _ in sorted(arr)]
