** 3484. Design Spreadsheet **

# Approach 1:
class Spreadsheet:

    def __init__(self, rows: int):
        self.map = dict()        

    def setCell(self, cell: str, value: int) -> None:        
        self.map[cell] = value

    def resetCell(self, cell: str) -> None:
        
        if(cell in self.map):
            self.map.pop(cell)

    def getValue(self, formula: str) -> int:
        
        formula = formula.replace("=", "")
        formula = formula.split("+")
        t1 = formula[0]
        t2 = formula[1]

        if(t1.isdigit()):
            t1 = int(t1)    
        else:
            if(t1 not in self.map):
                t1 = 0
            else:
                t1 = self.map[t1]
        
        if(t2.isdigit()):
            t2 = int(t2)    
        else:
            if(t2 not in self.map):
                t2 = 0
            else:
                t2 = self.map[t2]

        return t1 + t2

# Approach 2:
class Spreadsheet:
    def __init__(self, rows: int):
        self.spreadsheet = [[0 for _ in range(26)] for _ in range(rows)]
        return

    def getCellValue(self, reference):
        if reference[0].isalpha():
            col, row = (ord(reference[0])-ord('A'), int(reference[1:])-1)
            return self.spreadsheet[row][col]
        else:
            return int(reference)

    def setCell(self, cell: str, value: int) -> None:
        col, row = (ord(cell[0])-ord('A'), int(cell[1:])-1)
        self.spreadsheet[row][col] = value
        return

    def resetCell(self, cell: str) -> None:
        self.setCell(cell, 0)
        return

    def getValue(self, formula: str) -> int:
        [X, Y] = formula[1:].split("+")

        xVal = self.getCellValue(X)
        yVal = self.getCellValue(Y)
        return xVal + yVal
