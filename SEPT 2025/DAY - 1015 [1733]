** 1733. Minimum Number of People to Teach **

# Approach 1:
from typing import List

class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        need = set()
        for u, v in friendships:
            u -= 1
            v -= 1
            ok = False
            for x in languages[u]:
                if x in languages[v]:
                    ok = True
                    break
            if not ok:
                need.add(u)
                need.add(v)

        ans = len(languages) + 1
        for i in range(1, n + 1):
            cans = 0
            for v in need:
                if i not in languages[v]:
                    cans += 1
            ans = min(ans, cans)
        return ans

# Approach 2:
from collections import defaultdict

class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        user_languages = {}
        for i, langs in enumerate(languages):
            user_languages[i + 1] = set(langs) 
        cant_communicate = set()
        for u, v in friendships:
            if not user_languages[u].intersection(user_languages[v]):
                cant_communicate.add(u)
                cant_communicate.add(v)

        if not cant_communicate:
            return 0

        lang_count = defaultdict(int)
        for user in cant_communicate:
            for lang in user_languages[user]:
                lang_count[lang] += 1

        max_known = max(lang_count.values(), default=0)
        return len(cant_communicate) - max_known
