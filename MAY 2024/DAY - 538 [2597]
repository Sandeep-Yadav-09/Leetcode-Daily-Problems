** 2597. The Number of Beautiful Subsets **

# Approach 1:
class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        n, dict1 = len(nums), defaultdict(int)

        def dfs(i):
            total = 0

            for j in range(i,n):
                if dict1[nums[j]+k] == 0 and dict1[nums[j]-k] == 0:
                    dict1[nums[j]] += 1
                    total += dfs(j+1) + 1
                    dict1[nums[j]] -= 1
            return total 
        return dfs(0)

# Approach 2:
class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        def backtrack(i,count):
            if i==len(nums):
                return 1

            res = backtrack(i+1,count)
            if not count[nums[i]+k] and not count[nums[i]-k]:
                count[nums[i]]+=1
                res+=backtrack(i+1,count)
                count[nums[i]]-=1
            return res
        
        return backtrack(0,defaultdict(int))-1
