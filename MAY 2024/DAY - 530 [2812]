** 2812. Find the Safest Path in a Grid **

# Approach 1:
import heapq

class Solution:
    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:
        q = deque()
        n = len(grid)
        m = len(grid[0])
        vis = [[0 for i in range(m)] for j in range(n)]
        dr = [-1,0,1,0]
        dc = [0,1,0,-1]

        if grid[0][0] or grid[n-1][m-1]:
            return 0
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:
                    q.append([i,j])
                    vis[i][j] = 1
        cnt = 0
        while len(q) != 0:
            size = len(q)
            for k in range(size):
                node = q.popleft()
                grid[node[0]][node[1]] = cnt
                for i in range(4):
                    nr = node[0] + dr[i]
                    nc = node[1] + dc[i]
                    if nr >= 0 and nr < n and nc >= 0 and nc < m and vis[nr][nc] == 0 and grid[nr][nc] == 0:
                        q.append([nr,nc])
                        vis[nr][nc] = 1
                        # grid[nr][nc] = cnt
                
            cnt += 1
        
        q = []
        heapq.heappush(q,[-1*grid[0][0],0,0])
        dist = [[0 for i in range(m)] for j in range(n)]
        while len(q) != 0:
            # node = q.popleft()
            node = heapq.heappop(q)
            dis = -1*node[0]
            r = node[1]
            c = node[2]
            if r == n-1 and c == m-1:
                return dis
            for i in range(4):
                nr = r + dr[i]
                nc = c + dc[i]
                if nr >= 0 and nr < n and nc >= 0 and nc < m:
                    mini = min(dis,grid[nr][nc])
                    if mini > dist[nr][nc]:
                        # q.append([mini,nr,nc])
                        heapq.heappush(q,[-1*mini,nr,nc])
                        dist[nr][nc] = mini
                    
        return dist[n-1][m-1]

# Approach 2:
class Solution:
    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        nm = n*m
        f = list(range(nm))
        
        def find(x):
            if f[x] != x:
                f[x] = find(f[x])

            return f[x]

        def merge(u, v):
            fu, fv = find(u), find(v)
            if fu < fv:
                f[fu] = fv
            elif fv < fu:
                f[fv] = fu

        mp = [[]]
        for y in range(n):
            for x in range(m):
                if grid[y][x]:
                    mp[0].append([y, x])
                    grid[y][x] = None

        while grid[0][0] is not None and grid[-1][-1] is not None:
            que = mp[-1]
            que2 = []
            mp.append(que2)

            for y, x in que:
                for y1, x1 in [y+1, x], [y-1, x], [y, x+1], [y, x-1]:
                    if 0 <= y1 < n and 0 <= x1 < m and grid[y1][x1] is not None:
                        que2.append([y1, x1])
                        grid[y1][x1] = None

        que = mp.pop()
        for y, x in que:
            grid[y][x] = 0

        for y in range(n):
            for x in range(m):
                if grid[y][x] is not None:
                    idx = y*m+x
                    if y+1 < n and grid[y+1][x] is not None:
                        merge(idx, idx+m)
                    if x+1 < m and grid[y][x+1] is not None:
                        merge(idx, idx+1)

        if find(0) == nm-1:
            return len(mp)

        while mp:
            que = mp.pop()
            for y, x in que:
                grid[y][x] = 0
                idx = y*m+x
                for y1, x1 in [y+1, x], [y-1, x], [y, x+1], [y, x-1]:
                    if 0 <= y1 < n and 0 <= x1 < m and grid[y1][x1] is not None:
                        merge(idx, y1*m+x1)
            if find(0) == nm-1:
                break

        return len(mp)
