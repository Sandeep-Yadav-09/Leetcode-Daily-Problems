** 2816. Double a Number Represented as a Linked List **

# Approach 1:
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        def dfs(node):
            
            sm = 2*node.val + (dfs(node.next) if node.next else 0)

            node.val = sm%10
            return sm//10

        return ListNode(1, head) if dfs(head) else head

# Approach 2:
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev, node = None, head

        while node:
            next_temp = node.next
            node.next = prev
            prev, node = node, next_temp
        head = prev

        node = head
        carry = 0
        while node:
            current_double = node.val * 2 + carry
            node.val = current_double % 10
            carry = current_double // 10
            prev = node
            node = node.next

        if carry > 0:
            prev.next = ListNode(carry)

        prev, node = None, head
        while node:
            next_temp = node.next
            node.next = prev
            prev, node = node, next_temp

        return prev
