** 1361. Validate Binary Tree Nodes **

# Approach 1:
from collections import deque

class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
		root = 0
		childrenNodes = set(leftChild + rightChild)
		for i in range(n):
			if i not in childrenNodes:
				root = i
		
		visited = set()
		queue = deque([root])
		
		while queue:
			node = queue.popleft()
			if node in visited:
				return False
			
			visited.add(node)
			
			if leftChild[node] != -1:
				queue.append(leftChild[node])
			if rightChild[node] != -1:
				queue.append(rightChild[node])
		return len(visited) == n

# Approach 2:
class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
        n = len(leftChild)
        
        parent = [-1] * n
        
        for idx, (left, right) in enumerate(zip(leftChild, rightChild)):
            
            if left != -1:
                if parent[left] != -1: return False
                parent[left] = idx
                
            if right != -1:
                if parent[right] != -1: return False
                parent[right] = idx
        
        if parent.count(-1) != 1: return False
            
        vis = set()
        def dfs_has_cycle(u):
            if u in vis:
                return True
            else:
                vis.add(u)
            
            for kid in [leftChild[u], rightChild[u]]:
                if kid != -1:
                    if dfs_has_cycle(kid): return True
            
        if dfs_has_cycle(parent.index(-1)): return False
        
        if len(vis) != n: return False
        
        return True

# Approach 3:
class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
        left  = set(x for x in leftChild  if x != -1)
        right = set(x for x in rightChild if x != -1)
        return len(left | right) == n-1 and (not left & right)
