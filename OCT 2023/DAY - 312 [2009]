** 2009. Minimum Number of Operations to Make Array Continuous **

# Approach 1:
class Solution:
    def minOperations(self, nums: List[int]) -> int:
        n = len(nums)
        nums = sorted(set(nums))
        ans = sys.maxsize

        for i, s in enumerate(nums):
            e = s + n - 1
            idx = bisect_right(nums, e)

            ans = min(ans, n - (idx - i))
        return ans

# Approach 2:
class Solution:
    def minOperations(self, nums: List[int]) -> int:
        n = len(nums)
        nums = sorted(set(nums))
		
        answer = float("+inf")
        for i, start in enumerate(nums):
            
            search = start + n - 1  # number to search
            start, end = 0, len(nums)-1
            
            while start <= end:
                mid = start + (end - start) // 2
                if nums[mid] <= search:
                    idx = mid
                    start = mid + 1
                else:
                    end = mid - 1
            
            changes = idx - i + 1
            answer = min(answer, n - changes)
        return answer

# Approach 3:
class Solution:
    def minOperations(self, nums: List[int]) -> int:
        N = len(nums)
        queue = deque()
        max_length = 1

        for num in sorted(set(nums)):
            while queue and num - queue[0] >= N:
                queue.popleft()

            queue.append(num)
            max_length = max(max_length, len(queue))

        return N - max_length
