** 501. Find Mode in Binary Search Tree **

# Approach 1:
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        def in_order_traversal(node):
            nonlocal current_val, current_count, max_count, modes
            if not node:
                return
            
            in_order_traversal(node.left)
            
            current_count = current_count + 1 if node.val == current_val else 1
            current_val = node.val
            
            if current_count > max_count:
                max_count = current_count
                modes = [current_val]
            elif current_count == max_count:
                modes.append(current_val)
            
            in_order_traversal(node.right)
            
        current_val = None
        current_count = 0
        max_count = 0
        modes = []
        in_order_traversal(root)
        return modes

# Approach 2:
class Solution:
    def findMode(self, root: TreeNode) -> List[int]:
        
        lst = []                            # result
        dic = {}                            # put node value in dictionary
        maxi = 0                            # the frequence of the most frequently occurred element
        
        def find(root):
            
            if not root:                    # leaf node
                return
            
            if root.val in dic:             # if node value is in the dictionry, value + 1
                dic[root.val] += 1
            else:
                dic[root.val] = 1           # if node value is not in the dictionary, value = 1
            
            find(root.left)
            find(root.right)
            
            return 
     
        find(root)
        dicval_list = list(dic.values())    # list all the values in dictionary
        maxi = max(dicval_list)             # find maximum value in dictionary
        for key, value in dic.items():
            if value == maxi:               # if value = maximum, append this key to list
                lst.append(key)
        return lst

# Approach 3:
class Solution:
    def findMode(self, root: TreeNode) -> list[int]:

        def dfs(root: TreeNode)-> None:
            if not root: return

            d[root.val]+=1

            dfs(root.left)
            dfs(root.right)

            return

            
        d, ans = defaultdict(int), []
        
        dfs(root)
        mx = max(d.values())

        return [key for key in d if d[key] == mx]
