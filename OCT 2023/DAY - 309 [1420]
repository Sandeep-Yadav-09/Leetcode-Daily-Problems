** 1420. Build Array Where You Can Find The Maximum Exactly K Comparisons **

# Approach 1:
class Solution:
    def numOfArrays(self, n: int, m: int, k: int) -> int:
        mod = 10**9 + 7
        
        dp = [[0] * (k+1) for _ in range(m+1)]
        prefix = [[0] * (k+1) for _ in range(m+1)]
        prevDp = [[0] * (k+1) for _ in range(m+1)]
        prevPrefix = [[0] * (k+1) for _ in range(m+1)]
        
        for j in range(1, m+1):
            prevDp[j][1] = 1
            prevPrefix[j][1] = j
        
        for _ in range(2, n+1):
            dp = [[0] * (k+1) for _ in range(m+1)]
            prefix = [[0] * (k+1) for _ in range(m+1)]
            
            for maxNum in range(1, m+1):
                for cost in range(1, k+1):
                    dp[maxNum][cost] = (maxNum * prevDp[maxNum][cost]) % mod
                    
                    if maxNum > 1 and cost > 1:
                        dp[maxNum][cost] += prevPrefix[maxNum - 1][cost - 1]
                        dp[maxNum][cost] %= mod
                    
                    prefix[maxNum][cost] = (prefix[maxNum - 1][cost] + dp[maxNum][cost]) % mod
            
            prevDp, prevPrefix = [row[:] for row in dp], [row[:] for row in prefix]
        
        return prefix[m][k]

# Approach 2:
class Solution:
    def numOfArrays(self, n, m, k):
        if m < k: return 0
        dp = [[1] * m] + [[0] * m for _ in range(k - 1)]
        mod = 10 ** 9 + 7
        for _ in range(n - 1):
            for i in range(k - 1, -1, -1):
                cur = 0
                for j in range(m):
                    dp[i][j] = (dp[i][j] * (j + 1) + cur) % mod
                    if i: cur = (cur + dp[i - 1][j]) % mod
        return sum(dp[-1]) % mod

# Approach 3:
class Solution:
    def numOfArrays(self, n: int, m: int, k: int) -> int:
        @lru_cache(None)
        def dp(i,h,k):      
            if i==n and k==0: return 1
            if i==n or k<0: return 0
            return sum(dp(i+1,max(h,j),k-(j>h)) for j in range(1,m+1))%1000000007
        return dp(0,-1,k)
