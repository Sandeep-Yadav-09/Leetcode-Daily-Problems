** 341. Flatten Nested List Iterator **

# Approach 1:
class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        def flatten(nested):
            result = []
            for ni in nested:
                if ni.isInteger():
                    result.append(ni.getInteger())
                else:
                    result.extend(flatten(ni.getList()))
            return result
        
        self.flattened = flatten(nestedList)
        self.index = 0

    def next(self) -> int:
        self.index += 1
        return self.flattened[self.index - 1]

    def hasNext(self) -> bool:
        return self.index < len(self.flattened)

# Approach 2:
class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.stack = nestedList[::-1]
    
    def next(self) -> int:
        return self.stack.pop().getInteger()
    
    def hasNext(self) -> bool:
        while self.stack:
            top = self.stack[-1]
            if top.isInteger():
                return True
            self.stack = self.stack[:-1] + top.getList()[::-1]
        return False

# Approach 3:
class NestedIterator:
    def __init__(self, nestedList):
        # The list of NestedInteger elements to be flattened
        self.nestedList = nestedList
        
        # The flattened list of integers
        self.flattenedList = []
        
        # Index to keep track of the current position in the flattenedList
        self.currentIndex = 0

        # Recursively flattens the nested list and adds integers to the flattenedList
        def flatten(currentList):
            for item in currentList:
                if item.isInteger():
                    self.flattenedList.append(item.getInteger())
                else:
                    # Recursively flatten nested lists
                    flatten(item.getList())
        
        # Flatten the nestedList during initialization
        flatten(self.nestedList)

    # Returns the next integer in the flattened list
    def next(self):
        number = self.flattenedList[self.currentIndex]
        self.currentIndex += 1
        return number

    # Checks if there are more integers in the flattened list
    def hasNext(self):
        return self.currentIndex < len(self.flattenedList)
