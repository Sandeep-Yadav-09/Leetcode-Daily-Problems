** 1269. Number of Ways to Stay in the Same Place After Some Steps **

# Approach 1:
class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        m = steps
        n = min(steps // 2 + 1, arrLen)

        dp = [[0] * n for _ in range(m + 1)]

        dp[0][0] = 1
        mod = 10 ** 9 + 7

        for i in range(1, m + 1):
            for j in range(n):
                dp[i][j] = dp[i-1][j]  
                if j > 0:
                    dp[i][j] += dp[i-1][j-1]
                if j < n - 1:
                    dp[i][j] += dp[i-1][j+1]

        return dp[m][0] % mod

# Approach 2:
class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        MOD = 10**9 + 7
        memo = {}
        
        def dp(step, index):
            if step == 0:
                return 1 if index == 0 else 0
            if step < 0 or index < 0 or index >= arrLen:
                return 0
            if (step, index) in memo:
                return memo[(step, index)]
            
            ways = dp(step - 1, index) % MOD 
            ways += dp(step - 1, index - 1) % MOD  
            ways += dp(step - 1, index + 1) % MOD 
            
            memo[(step, index)] = ways % MOD
            return ways % MOD
        
        return dp(steps, 0)

# Approach 3:
class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        MOD = 10**9 + 7

        max_index = min(steps // 2, arrLen - 1) 
        
        dp = [[0] * (max_index + 1) for _ in range(2)]
        dp[0][0] = 1  
        
        for step in range(1, steps + 1):
            current, prev = step % 2, (step - 1) % 2
            
            for index in range(max_index + 1):
                dp[current][index] = dp[prev][index] % MOD 
                
                if index > 0:
                    dp[current][index] += dp[prev][index - 1] % MOD 
                
                if index < max_index:
                    dp[current][index] += dp[prev][index + 1] % MOD  
        
        return dp[steps % 2][0]
