** 1220. Count Vowels Permutation **

# Approach 1:
class Solution:
    def countVowelPermutation(self, n: int) -> int:
        MOD = 10**9 + 7
        
        a, e, i, o, u = 1, 1, 1, 1, 1
        
        for _ in range(1, n):
            a_next = e
            e_next = (a + i) % MOD
            i_next = (a + e + o + u) % MOD
            o_next = (i + u) % MOD
            u_next = a
            
            a, e, i, o, u = a_next, e_next, i_next, o_next, u_next
        
        return (a + e + i + o + u) % MOD

# Approach 2:
import numpy as np
class Solution:
	def countVowelPermutation(self, n: int) -> int:        
		mod = 10**9 + 7
		if n == 1: return 5
		M = np.matrix([[0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [1,1,0,1,1], [0,0,1,0,1], [1,0,0,0,0]])

		res = 1
		N = n - 1
		while N > 0:
			if N % 2: 
				res = res * M % mod

			M = M * M % mod

			N //= 2

		return int(np.sum(res)) % mod

# Approach 3:
class Solution:
    def countVowelPermutation(self, n: int) -> int:
        mod = 10 ** 9 + 7
        dp = [1] * 5
        for _ in range(n - 1):
            add = [0] * 5
            # from a
            add[1] = (add[1] + dp[0]) % mod
            # from e
            add[0] = (add[0] + dp[1]) % mod
            add[2] = (add[2] + dp[1]) % mod
            # from i
            add[0] = (add[0] + dp[2]) % mod
            add[1] = (add[1] + dp[2]) % mod
            add[3] = (add[3] + dp[2]) % mod
            add[4] = (add[4] + dp[2]) % mod
            # from o
            add[2] = (add[2] + dp[3]) % mod
            add[4] = (add[4] + dp[3]) % mod
            # from u
            add[0] = (add[0] + dp[4]) % mod
            for i in range(5):
                dp[i] = add[i] % mod
        return sum(dp) % mod
