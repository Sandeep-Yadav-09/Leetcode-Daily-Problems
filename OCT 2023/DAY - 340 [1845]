** 1845. Seat Reservation Manager **

# Approach 1:
class SeatManager:

    def __init__(self, n: int):
        self.last = 0
        self.pq = []

    def reserve(self) -> int:
        if not self.pq:
            self.last += 1
            return self.last
        return heapq.heappop(self.pq)

    def unreserve(self, seatNumber: int) -> None:
        if seatNumber == self.last:
            self.last -= 1
        else:
            heapq.heappush(self.pq, seatNumber)

# Approach 2:
class SeatManager:

    def __init__(self, n: int):
        self.heap = list(range(1, n+1))

    def reserve(self) -> int:
        return heapq.heappop(self.heap)

    def unreserve(self, seatNumber: int) -> None:
        heapq.heappush(self.heap, seatNumber)

# Approach 3:
class SeatManager:

    def __init__(self, n: int):
        self.unres = [i for i in range(1,n+1)]
        
    def reserve(self) -> int:
        return heapq.heappop(self.unres)
        
    def unreserve(self, seatNumber: int) -> None:
        heapq.heappush(self.unres,seatNumber)
