** 1658. Minimum Operations to Reduce X to Zero **

# Approach 1:
class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        target, n = sum(nums) - x, len(nums)
        
        if target == 0:
            return n
        
        max_len = cur_sum = left = 0
        
        for right, val in enumerate(nums):
            cur_sum += val
            while left <= right and cur_sum > target:
                cur_sum -= nums[left]
                left += 1
            if cur_sum == target:
                max_len = max(max_len, right - left + 1)
        
        return n - max_len if max_len else -1

# Approach 2:
class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        mp = {0: 0}
        prefix = 0
        for i, num in enumerate(nums, 1): 
            prefix += num
            mp[prefix] = i 
            
        ans = mp.get(x, inf)
        for i, num in enumerate(reversed(nums), 1): 
            x -= num
            if x in mp and mp[x] + i <= len(nums): ans = min(ans, i + mp[x])
        return ans if ans < inf else -1 

# Approach 3:
import bisect
class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        n = len(nums)
        left = [0] * n
        right = [0] * n
        left[0] = nums[0]
        for i in range(1,n):
            left[i] = left[i-1] + nums[i]
        nums = nums[::-1]
        right[0] = nums[0]
        for i in range(1,n):
            right[i] = right[i-1] + nums[i]
            
        res = n+1
        
        a = bisect.bisect_left(left,x)
        
        if a != n:
            
            if left[a] == x:
                res = min(res,a+1)
        
        b = bisect.bisect_left(right,x)
        
        if b != n:
            
            if right[b] == x:
                res = min(res,b+1)
        
        
        l, r = 0, n-1
        
        while l+r <= n :
            if l>=n or r<0:      #######
				break            #  those lines 
            if left[l]>= x:      #  are used  to 
                break            #  reduce time,
            if right[r]>=x:      #  to fast exit loops or 
                r -= 1           # let r get to possible place fast
                continue         ########
            if left[l] + right[r] == x:
                res = min(res,l+1+r+1)
                l += 1
                r -= 1
            elif left[l] + right[r] > x:
                r -= 1
            elif left[l] + right[r] < x:
                l += 1
        if res == n+1:
            return -1
        return res
