** 1647. Minimum Deletions to Make Character Frequencies Unique **

# Approach 1:
# Greedy Approach
class Solution:
    def minDeletions(self, s: str) -> int:
        cnt = Counter(s)
        deletions = 0
        used_frequencies = set()
        
        for char, freq in cnt.items():
            while freq > 0 and freq in used_frequencies:
                freq -= 1
                deletions += 1
            used_frequencies.add(freq)
            
        return deletions

# Approach 2:
class Solution:
    def minDeletions(self, s: str) -> int:
        charFrequency = [0] * 26
        
        existingFrequencies = set()
        
        for c in s:
            charFrequency[ord(c) - ord('a')] += 1
        
        deletions = 0
        charFrequency.sort(reverse=True)

        for i in range(len(charFrequency)):
            curFreq = charFrequency[i]
            
            while curFreq > 0 and curFreq in existingFrequencies:
                deletions += 1
                curFreq -= 1
            
            existingFrequencies.add(curFreq)

        return deletions

# Approach 3:
class Solution:
    def minDeletions(self, s: str) -> int:
        charFrequency = collections.defaultdict(int)
        existingFrequencies = set()
        
        for c in s:
            charFrequency[c] += 1
        maxHeap = []

        for freq in charFrequency.values():
            heapq.heappush(maxHeap, -freq)  

        deletions = 0
        while maxHeap:
            curFreq = -heapq.heappop(maxHeap)  
            
            while curFreq > 0 and curFreq in existingFrequencies:
                curFreq -= 1
                deletions += 1
            
            existingFrequencies.add(curFreq)
        
        return deletions
