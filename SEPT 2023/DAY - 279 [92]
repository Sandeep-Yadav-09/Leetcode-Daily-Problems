** 92. Reverse Linked List II **

# Apprroach 1:
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:

        if not head or left == right:
            return head

        dummy = ListNode(0, head)
        prev = dummy

        for _ in range(left - 1):
            prev = prev.next

        cur = prev.next
        for _ in range(right - left):
            temp = cur.next
            cur.next = temp.next
            temp.next = prev.next
            prev.next = temp

        return dummy.next

# Approach 2:
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if not (head and left < right):
            return head

        def helper(node, m):
            nonlocal left, right
            if m == left:
                prev = None
                current = node
                while m <= right:
                    current.next, prev, current = prev, current, current.next
                    m += 1
                node.next = current
                return prev
            elif m < left:
                node.next = helper(node.next, m + 1)
            return node

        return helper(head, 1)

# Approach 3:
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if not head or not head.next: return head
        
        dummy = ListNode(-1)
        dummy.next = head
        cur = head
        curCount = 1
        leftPre = dummy
        rightNex = head
        
        while cur:
            if curCount < left:
                leftPre = leftPre.next
            if curCount == right:
                rightNex = cur.next
                cur.next = None
                break
            cur = cur.next
            curCount += 1
        
        pre = leftPre
        cur = pre.next
        nex = cur.next
        while nex:
            cur.next = nex.next
            nex.next = pre.next
            pre.next = nex
            nex = cur.next
        
        cur.next = rightNex
        return dummy.next
