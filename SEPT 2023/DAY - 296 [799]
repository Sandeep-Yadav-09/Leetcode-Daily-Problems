** 799. Champagne Tower **

# Approach 1:
class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        tower = [[0] * (i + 1) for i in range(query_row + 1)]
        tower[0][0] = poured

        for row in range(query_row):
            for glass in range(len(tower[row])):
                excess = (tower[row][glass] - 1) / 2.0
                if excess > 0:
                    tower[row + 1][glass] += excess
                    tower[row + 1][glass + 1] += excess

        return min(1.0, tower[query_row][query_glass])

# Approach 2:
class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        last_row = [ poured ]
        for i in range(query_row):
            curr_row = [0] * (i + 2)
            for col in range(len(last_row)):
                excess = max(last_row[col] - 1, 0) / 2
                curr_row[col] += excess 
                curr_row[col + 1] += excess
            last_row = curr_row
        return min(last_row[query_glass], 1)
