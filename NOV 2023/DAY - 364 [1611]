** 1611. Minimum One Bit Operations to Make Integers Zero **

# Approach 1:
class Solution:
    def minimumOneBitOperations(self, n: int) -> int:
        binary = format(n, "b")

        N, res = len(binary), 0
        
        for i in range(1, N+1):
            if binary[-i] == "1": res = 2**i-1 - res
                
        return res

# Approach 2:
class Solution:
    def minimumOneBitOperations(self, n: int) -> int:
        
        n = bin(n)[2:]
        
        @cache
        def zero(n):
            if '1' not in n:
                return 0
            elif n[0] == '0':
                return zero(n[1:])
            else:
                if n == '1': return 1
                new = '1' + '0' * (len(n) - 2)
                return 1 + zero(new) + ones(n[1:])
            
        @cache
        def ones(n):
            if n == '1' or n[0] == '1' and n.count('1') == 1:
                return 0
            elif n[0] == '1':
                return zero(n[1:])
            else:
                if n == '0': return 1
                new = '1' + '0' * (len(n) - 2)
                return 1 + zero(new) + ones(n[1:])
            
        return zero(n)

# Approach 3:
class Solution:
    def minimumOneBitOperations(self, n: int) -> int:
        ans = 0
        i = 0

        # Iterates m times, where m is length of bin(n)
        while n:

            # We find the rightmost bit
            if n & 1:
                # If it is 1 we update ans
                ans = (2 ** (i + 1) - 1) - ans

            # We rightshift n by 1 bit
            n >>= 1

            # We keep track of which bit we are working on
            i += 1

        return ans
