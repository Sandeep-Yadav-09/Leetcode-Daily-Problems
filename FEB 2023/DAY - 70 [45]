** 45. Jump Game II **

# Approach 1:
class Solution:
    def jump(self, nums: List[int]) -> int:
                                            #          0 1 2 3 4
        ans, mx, end = 0, 0, 0              #  nums = [2,3,0,1,4]  
        
        for i, num in enumerate(nums[:-1]): #  i    num   mx    end   ans
                                            # –––   –––   –––   –––   –––
            mx = max(mx, i + num)           #  0     2     2     2     1
                                            #  1     3     4     2     1
            if i == end:                    #  2     0     4     4     2     
                ans += 1                    #  3     1     4     4     2                
                end = mx 

        return ans 
        
# Approach 2:
class Solution:
    def jump(self, nums: List[int]) -> int:
        if len(nums)==1: return 0
        
        reachableIndex = 0
        previousReachableIndex = 0
        jump = 0

        for curr in range(len(nums)):
            if curr + nums[curr] >= reachableIndex:
                reachableIndex = curr + nums[curr]

            if curr == previousReachableIndex:
                jump += 1
                previousReachableIndex = reachableIndex
                if previousReachableIndex >= len(nums) - 1:
                    return jump
                    
# Approach 3:
class Solution:
    def jump(self, nums: List[int]) -> int:
        memo={}
        def min_jumps(index):
            if index>=len(nums)-1:
                return 0
            if index in memo:
                return memo[index]
            ans=float('inf')
            for i in range(index,index+nums[index]):
                ans=min(ans,1+min_jumps(i+1))
            memo[index]=ans
            return ans
        return min_jumps(0) 

# Approach 4:
class Solution:
    def jump(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        
        # dp[i] means the minimum number of jumps to reach index i
        # for each dp[i]，we need to find the earliest j that can reach i from j
        # dp[i] = dp[j] + 1
        
        dp = [0] * n
        j = 0
        for i in range(1, n):
            while j + nums[j] < i:
                j += 1
            dp[i] = dp[j] + 1
        
        return dp[-1]
