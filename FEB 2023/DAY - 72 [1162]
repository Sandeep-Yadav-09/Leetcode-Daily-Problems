** 1162. As Far from Land as Possible **

# Approach 1:
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dq = deque((i, j) for i in range(n) for j in range(n) if grid[i][j])
        res = 0
        while dq:
            r0, c0 = dq.popleft()
            for dr, dc in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                r1, c1 = r0 + dr, c0 + dc
                if 0 <= r1 < n and 0 <= c1 < n and not grid[r1][c1]:
                    dq.append((r1, c1))
                    grid[r1][c1] = grid[r0][c0] + 1
                    res = max(res, grid[r1][c1])
        return res - 1

# Approach 2:
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        n = len(grid)
        q = collections.deque()
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1: q.append((i, j))
        if not q or len(q) == n * n: return -1
        res = -1
        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        while q:
            size = len(q)
            res += 1
            while size:
                size -= 1
                x, y = q.popleft()
                for dx, dy in dirs:
                    i, j = x + dx, y + dy
                    if 0 <= i < n and 0 <= j < n and grid[i][j] == 0:
                        grid[i][j] = 1
                        q.append((i, j))
        return res
        
# Approach 3:
from collections import deque

class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        # number of rows and columns in the grid
        n = len(grid)
        # variable to keep track of the maximum distance
        dist = 0
        # queue to keep track of the cells to be processed
        q = deque()
        # arrays to keep track of the row and column movements
        drow = [0, -1, 0, 1]
        dcol = [-1, 0, 1, 0]
        
        # loop through the grid to add all the land cells to the queue
        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    q.append((i, j))
        # if the entire grid is land, return -1
        if len(q) == n * n:
            return -1
        
        # loop until the queue is empty
        while q:
            # get the size of the queue for the current level of the BFS
            size = len(q)
            # increment the distance
            dist += 1
            # loop through the size of the queue
            for _ in range(size):
                # get the next cell to be processed
                r, c = q.popleft()
                # loop through the 4 possible movements
                for i in range(4):
                    # calculate the new row and column
                    nrow, ncol = r + drow[i], c + dcol[i]
                    # if the new cell is within the grid and is a water cell
                    if 0 <= nrow < n and 0 <= ncol < n and grid[nrow][ncol] == 0:
                        # mark the new cell as land
                        grid[nrow][ncol] = 1
                        # add the new cell to the queue for processing
                        q.append((nrow, ncol))
        # return the maximum distance minus 1, as the initial distance is set to 1
        return dist - 1
