** 103. Binary Tree Zigzag Level Order Traversal **

# Approach 1:
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root: return []
        stack = [root]
        out = []
        reverse = True
        while len(stack):
            temp = []
            out.append([i.val for i in (stack if reverse else stack[::-1])])
            reverse = not reverse
            while len(stack):
                top = stack.pop(0)
                if top.left: temp.append(top.left)
                if top.right: temp.append(top.right)
            
            stack = temp
        return out
        
# Approach 2:
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        level = 1
        res, curr, nxt = [], [root], [] 
        while curr:
            for i in curr:
                if i.left:
                    nxt.append(i.left)
                if i.right:
                    nxt.append(i.right)
            if level%2 == 0:
                curr.reverse()
            res.append([i.val for i in curr])
            curr = nxt
            if nxt:
                level +=1
            nxt = []
        return res
        
# Approach 3:
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root: return []
        queue = collections.deque([root])
        res = []
        even_level = False
        while queue:
            n = len(queue)
            level = []
            for _ in range(n):
                node = queue.popleft()
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            if even_level:
                res.append(level[::-1])
            else:
                res.append(level)
            even_level = not even_level
        return res
