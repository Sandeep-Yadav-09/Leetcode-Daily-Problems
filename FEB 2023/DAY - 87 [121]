** 121. Best Time to Buy and Sell Stock **

# Approach 1:
class Solution:
    def maxProfit(self, p: List[int]) -> int:
        l, r = 0, 1
        mp = 0
        while r<len(p):
            if p[l]<p[r]:
                profit = p[r] - p[l]
                mp = max(profit, mp)
            else:
                l = r
            r += 1
        return mp
        
# Approach 2:
class Solution(object):
    def maxProfit(self, prices):
        if len(prices) == 0: return 0
        else:
            profit = 0
            minBuy = prices[0]
            for i in range(len(prices)):
                profit = max(prices[i] - minBuy, profit)
                minBuy = min(minBuy, prices[i])
            return profit
            
# Approach 3:
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        maxProfit = 0
        minPurchase = prices[0]
        for i in range(1, len(prices)):		
            maxProfit = max(maxProfit, prices[i] - minPurchase)
            minPurchase = min(minPurchase, prices[i])
        return maxProfit
