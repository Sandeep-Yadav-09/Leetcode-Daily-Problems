** 886. Possible Bipartition **

# Approach 1 :
class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        d = defaultdict(list)
        for a,b in dislikes:
            d[a].append(b)
            d[b].append(a)
        
        group = {i:None for i in range(1,n+1)}

        def dfs(node, g):
            if not group[node]:
                group[node] = g
            else:
                return group[node] == g
            
            for p in d[node]:
                if not dfs(p, 2 if g==1 else 1):
                    return False
            return True
        
        for i in range(1,n+1):
            if not group[n] and not dfs(n,1):
                return False
        return True
        
# Approach 2 :
class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        if not dislikes:
            return True
        queue,visited = deque(),{}
        graph = defaultdict(set)
        for f,t in dislikes: 
            graph[f].add(t)
            graph[t].add(f)
            
        for i in range(1,n+1):
            if i not in visited:
                queue.append(i)
                visited[i] = 0 if i-1 in visited and visited[i-1]==1 else 1 
            while queue:
                curr = queue.popleft()
                for nbr in graph[curr]:
                    if nbr not in visited:
                        queue.append(nbr)
                        visited[nbr] = 1 if visited[curr]==0 else 0
                    else:
                        if visited[nbr] == visited[curr]:
                            return False
        return True 
