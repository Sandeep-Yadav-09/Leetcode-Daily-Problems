** 1061. Lexicographically Smallest Equivalent String **

# Approach 1:
class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        uf = ascii_lowercase
        for i,j in sorted({tuple(sorted(map(ord,p))) for p in zip(s1,s2)}):
            uf = uf.replace(*sorted((uf[i-97],uf[j-97]))[::-1]) 

        return ''.join(uf[ord(c)-97] for c in baseStr)

# Approach 2:
from collections import defaultdict

class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        adj = defaultdict(list)

        for a, b in zip(s1, s2):
            adj[a].append(b)
            adj[b].append(a)

        def dfs(ch, visited):
            visited.add(ch)
            min_ch = ch
            for nei in adj[ch]:
                if nei not in visited:
                    candidate = dfs(nei, visited)
                    min_ch = min(min_ch, candidate)
            return min_ch

        result = []
        for ch in baseStr:
            visited = set()
            result.append(dfs(ch, visited))
        
        return ''.join(result)
