** 2616. Minimize the Maximum Difference of Pairs **

# Approach 1:
class Solution:
    def minimizeMax(self, nums: List[int], p: int) -> int:
        nums.sort()

        def isValid(diff):
            cnt,i=0,1
            while i<len(nums):
                if nums[i]-nums[i-1]<=diff:
                    cnt+=1
                    i+=1
                i+=1
            return cnt>=p
            
        l,r=0,nums[-1]-nums[0]
        while l<=r:
            mid=(l+r)//2
            if isValid(mid):
                ans=mid
                r=mid-1
            else:
                l=mid+1
        return ans

# Approach 2:
class Solution:
    def minimizeMax(self, nums: List[int], p: int) -> int:
        if p == 0:
            return 0
        nums.sort()
        n = len(nums) 
        diffs = [nums[i] - nums[i-1] for i in range(1, n)]
        lo, hi = 0, max(diffs)
        res = hi
        while lo <= hi:
            mid = (lo + hi) // 2
            cnt = 0
            i = 0
            while i < n-1 and cnt < p:
                if diffs[i] <= mid:
                    cnt += 1
                    i += 2
                else:
                    i += 1
            if cnt >= p:
                res = mid
                hi = mid - 1
            else:
                lo = mid + 1
        return res
