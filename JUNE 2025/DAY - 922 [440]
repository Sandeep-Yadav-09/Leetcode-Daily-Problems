** 440. K-th Smallest in Lexicographical Order **

# Approach 1:
class Solution:
    def findKthNumber(self, n: int, k: int) -> int:
        def count_numbers_with_prefix(prefix: int, limit: int) -> int:
            count = 0
            current = prefix
            next_prefix = prefix + 1

            while current <= limit:
                count += min(next_prefix, limit + 1) - current
                current *= 10
                next_prefix *= 10
            return count
        current = 1
        k -= 1  

        while k > 0:
            children_count = count_numbers_with_prefix(current, n)
            if k >= children_count:
                k -= children_count
                current += 1
            else:
                current *= 10
                k -= 1

        return current

# Approach 2:
class Solution:
    def findKthNumber(self, n: int, k: int) -> int:
        curr = 1
        k -= 1 
        while k > 0:
            steps = self.count_steps(n, curr, curr + 1)
            if steps <= k:
                curr += 1
                k -= steps
            else:
                curr *= 10
                k -= 1
        return curr

    def count_steps(self, n, curr, next):
        steps = 0
        while curr <= n:
            steps += min(n + 1, next) - curr
            curr *= 10
            next *= 10
        return steps
