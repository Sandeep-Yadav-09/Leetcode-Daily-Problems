** 3445. Maximum Difference Between Even and Odd Frequency II **

# Approach 1:
class Solution:
    def maxDifference(self, s: str, k: int) -> int:
        n = len(s)
        res = float('-inf')
        for a in '01234':
            for b in '01234':
                if a == b:
                    continue
                arr = [1 if c == a else (-1 if c == b else 0) for c in s]
                aa = [1 if c == a else 0 for c in s]
                bb = [1 if c == b else 0 for c in s]
                pa = [0] * (n + 1)
                pb = [0] * (n + 1)
                p = [0] * (n + 1)
                for i in range(n):
                    p[i + 1] = p[i] + arr[i]
                    pa[i + 1] = pa[i] + aa[i]
                    pb[i + 1] = pb[i] + bb[i]
                mn = [[float('inf'), float('inf')], [float('inf'), float('inf')]]
                i = 0
                for j in range(n + 1):
                    while j - i >= k and pa[j] - pa[i] > 0 and pb[j] - pb[i] > 0:
                        mn[pa[i] % 2][pb[i] % 2] = min(mn[pa[i] % 2][pb[i] % 2], p[i])
                        i += 1
                    res = max(res, p[j] - mn[1 - (pa[j] % 2)][pb[j] % 2])
        return res

# Approach 2:
class Solution:
    def maxDifference(self, s: str, k: int) -> int:
        @lru_cache(maxsize = 8 * len(s))
        def bestSub(odd, even, isOdd, isEven, index, evenExists):
            if index == len(s):
                if isOdd and isEven and evenExists:
                    return 0
                else:
                    return -math.inf
            if s[index] == odd:
                if isOdd and isEven and evenExists:
                    return max(0, 1 + bestSub(odd, even, not isOdd, isEven, index + 1, evenExists))
                else:
                    return 1 + bestSub(odd, even, not isOdd, isEven, index + 1, evenExists)
            elif s[index] == even:
                if isOdd and isEven and evenExists:
                    return max(0, -1 + bestSub(odd, even, isOdd,  not isEven, index + 1, True))
                else:
                    return -1 + bestSub(odd, even, isOdd, not isEven, index + 1, True)
            else:
                if isOdd and isEven and evenExists:
                    return max(0, bestSub(odd, even, isOdd, isEven, index + 1, evenExists))
                else:
                    return bestSub(odd, even, isOdd, isEven, index + 1, evenExists)
        
        
        nums = ['0', '1', '2', '3', '4']
        combos = []
        for num in nums:
            for num2 in nums:
                if num2 != num:
                    combos.append((num, num2))
        
        ans = -math.inf
        for odd, even, in combos:
            end = 0
            counter = {}
        
            for start in range(len(s) - k + 1):
                while end < (start + k):
                    char = s[end]
                    counter[char] = counter.get(char, 0) + 1
                    end += 1
                
                index = start + k
                oddCount = counter.get(odd, 0)
                evenCount = counter.get(even, 0)
                currCombo = oddCount - evenCount
                currCombo += bestSub(odd, even, oddCount % 2 == 1, evenCount % 2 == 0, index, evenCount > 0)
                ans = max(ans, currCombo)
                counter[s[start]] -= 1
        return ans
