** 1367. Linked List in Binary Tree **

# Approach 1:
class Solution:
    def checkPath(self, head, root):
        if not head:
            return True
        
        if not root or head.val != root.val:
            return False
        
        return self.checkPath(head.next, root.left) or self.checkPath(head.next, root.right)

    def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:
        if not root:
            return False

        return (head.val == root.val and self.checkPath(head, root)) or self.isSubPath(head, root.left) or self.isSubPath(head, root.right)   

# Approach 2:
class Solution:
    def isSubPath(self, head: Optional[ListNode], root: Optional[TreeNode]) -> bool:

        if head is None:
            return True

        if root is None:
            return False

        if head.val == root.val:
            if self.isSame(head, root):
                return True
            
        return self.isSubPath(head, root.left) or self.isSubPath(head, root.right)

    def isSame(self, head, root):

        if head is None:
            return True
        
        if root is None:
            return False

        if head.val == root.val:
            return self.isSame(head.next, root.left) or self.isSame(head.next, root.right)
        
        return False
