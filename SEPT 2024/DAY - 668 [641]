** 641. Design Circular Deque **

# Approach 1:
class Node:
    def __init__(self, val, p=None, n=None):
        self.val = val
        self.prev = p
        self.next = n
class MyCircularDeque:
    def __init__(self, k: int):
        self.k = k
        self.l = 0
        self.head = self.tail = None

    def insertFront(self, value: int) -> bool:
        if(self.l == self.k):
            return 0
        if(self.l == 0):
            self.head = self.tail = Node(value)
        else:
            curr = Node(value)
            self.head.prev, curr.next = curr, self.head
            self.head = curr
        self.l += 1
        return 1
        

    def insertLast(self, value: int) -> bool:
        if(self.l == self.k):
            return 0
        if(self.l == 0):
            self.head = self.tail = Node(value)
        else:
            curr = Node(value)
            self.tail.next, curr.prev = curr, self.tail
            self.tail = curr
        self.l += 1
        return 1

    def deleteFront(self) -> bool:
        if(self.l == 0):
            return 0
        self.head = self.head.next
        self.l -= 1
        return 1

    def deleteLast(self) -> bool:
        if(self.l == 0):
            return 0
        self.tail = self.tail.prev
        self.l -= 1
        return 1

    def getFront(self) -> int:
        if(self.l == 0):
            return -1
        return self.head.val

    def getRear(self) -> int:
        if(self.l == 0):
            return -1
        return self.tail.val

    def isEmpty(self) -> bool:
        return self.l == 0

    def isFull(self) -> bool:
        return self.l == self.k

# Approach 2:
class MyCircularDeque:
    class __Node:
        def __init__(self, value):
            self.value = value
            self.previous = self.next = None

    def __init__(self, k: int):
        self.__capacity = k
        self.__size = 0
        self.__dummyRoot = self.__Node(None)
        self.__connect(self.__dummyRoot, self.__dummyRoot)

    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False

        node = self.__Node(value)
        self.__connect(node, self.__dummyRoot.next)
        self.__connect(self.__dummyRoot, node)
        self.__size += 1
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False

        node = self.__Node(value)
        self.__connect(self.__dummyRoot.previous, node)
        self.__connect(node, self.__dummyRoot)
        self.__size += 1
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty():
            return False

        self.__connect(self.__dummyRoot, self.__dummyRoot.next.next)
        self.__size -= 1
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty():
            return False

        self.__connect(self.__dummyRoot.previous.previous, self.__dummyRoot)
        self.__size -= 1
        return True

    def getFront(self) -> int:
        if self.isEmpty():
            return -1
        return self.__dummyRoot.next.value

    def getRear(self) -> int:
        if self.isEmpty():
            return -1
        return self.__dummyRoot.previous.value

    def isEmpty(self) -> bool:
        return self.__size == 0

    def isFull(self) -> bool:
        return self.__size == self.__capacity

    def __connect(self, node: __Node, following: __Node) -> None:
        node.next = following
        following.previous = node
