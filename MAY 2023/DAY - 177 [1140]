** 1140. Stone Game II **

# Approach 1:
class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        prefix_sum = list(itertools.accumulate(reversed(piles)))[::-1]        
        @cache
        def dp(index, m) -> int:
            if 2 * m >= len(piles) - index:
                return prefix_sum[index]
            return max(prefix_sum[index] - dp(index + x, max(m, x))
                       for x in range(1, 2 * m + 1))
        return dp(0, 1)

# Approach 2:
class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        l = len(piles)
        @cache
        def dp(i,m):
            if i >= l :
                return 0
            val = max(sum(piles[i:]) - dp(i+x,max(x,m)) for x in range(1, (2*m) + 1))
            return val
        return dp(0,1)
