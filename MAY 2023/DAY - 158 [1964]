** 1964. Find the Longest Valid Obstacle Course at Each Position **

# Approach 1:
class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        stack,ans=[],[]
        
        for i in obstacles:
            br=bisect_right(stack,i)
            if br==len(stack):
                stack.append(i)
            else:
                stack[br]=i
            ans.append(br+1)
            
        return ans

# Approach 2:
class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        lis = []
        result = []
        for obstacle in obstacles:
            idx = bisect.bisect_right(lis, obstacle)
            if idx == len(lis):
                lis.append(obstacle)
            else:
                lis[idx] = obstacle
            result.append(idx+1)
        return result

# Approach 3:
class Solution:
    def longestObstacleCourseAtEachPosition(self, obs: List[int]) -> List[int]:
        local = []
        res=[0 for _ in range(len(obs))]
        for i in range(len(obs)):
            n=obs[i]
            if len(local)==0 or local[-1]<=n:
                local.append(n)
                res[i]=len(local)
            else:
                ind = bisect.bisect_right(local,n)
                local[ind]=n
                res[i]=ind+1

        return res
