** 2466. Count Ways To Build Good Strings **

# Approach 1:
MOD = (10**9) + 7

class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        dp = collections.defaultdict(int)
        dp[0] = 1

        ans = 0
        for i in range(1, high + 1):
            dp[i] = dp[i - zero] + dp[i - one]
            ans += dp[i] if i >= low else 0

        return ans %  (10 ** 9 + 7)

# Approach 2:
MOD = (10**9) + 7

class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        memo = defaultdict(int)

        def recur(i):
            if i > high:
                return 0
            
            if i in memo:
                return memo[i]

            memo[i] = (
                ( 1 if low <= i <= high else 0 ) +
                recur(i + zero) +
                recur(i + one)
            )

            return memo[i] % MOD
        
        return recur(0) % MOD

# Approach 3:
class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:  # num theory applied dp
        # this block is optional gcd optimization
        gcd = math.gcd(zero, one)
        zero //= gcd
        one  //= gcd
        high //= gcd
        low = (low-1)//gcd + 1

        mod = 10**9+7
        dp = [0] * (high+1)
        dp[0] = 1
        for i in range(1, high+1):
            dp[i] = (dp[i-zero]+dp[i-one]) % mod
        return sum(dp[low:]) % mod
