** 54. Spiral Matrix **

# Approach 1:
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        result = []
        while matrix:
            result += matrix.pop(0)
            matrix = (list(zip(*matrix)))[::-1]
        return result

# Approach 2:
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        res = [] 
        self.helper(matrix,0,0,res)
        return res
        
        
    def helper(self,matrix,i,j,res):
        if i < 0 or i >= len(matrix) or j < 0 or j>=len(matrix[0]) or matrix[i][j] == '#':  return
        
        res.append(matrix[i][j])
        matrix[i][j] = '#'
        
        #are we going up? - yes? then go till one value greater than i
		#example -> when we are in the outer boundary of the matrix, i = 0
		# so go up (use this loop to increment j) until we reach (0,1) or (i, i+1)
        if j+1>=i:
            self.helper(matrix,i,j+1,res)
        self.helper(matrix,i+1,j,res)
        self.helper(matrix,i,j-1,res)
        self.helper(matrix,i-1,j,res)

# Approach 3:
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if not matrix:
            return []

        rows, cols = len(matrix), len(matrix[0])
        top, bottom, left, right = 0, rows-1, 0, cols-1
        result = []
        
        while len(result) < rows * cols:
            for i in range(left, right+1):
                result.append(matrix[top][i])
            top += 1
            
            for i in range(top, bottom+1):
                result.append(matrix[i][right])
            right -= 1
            
            if top <= bottom:
                for i in range(right, left-1, -1):
                    result.append(matrix[bottom][i])
                bottom -= 1
            
            if left <= right:
                for i in range(bottom, top-1, -1):
                    result.append(matrix[i][left])
                left += 1
        
        return result
