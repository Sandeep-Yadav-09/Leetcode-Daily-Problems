** 1572. Matrix Diagonal Sum **

# Approach 1:
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        n = len(mat)
        mid = n // 2
        summation = 0
     
        for i in range(n):
            # primary diagonal
            summation += mat[i][i]
            # secondary diagonal
            summation += mat[n-1-i][i]
 
        if n % 2 == 1:
            # remove center element (repeated) on odd side-length case
            summation -= mat[mid][mid]
 
        return summation

# Approach 2:
class Solution:
    def diagonalSum(self, A: List[List[int]]) -> int:
        n   = len(A)
        res = 0
        for i in range(n):
            res += A[i][i] + A[i][n-1-i]
        # x: Index of Element Repeated (when n is Odd)
        x = (n-1)//2
        return res - A[x][x] if n&1 else res
        
# Approach 3:
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        
        total = 0
        n = len(mat[0])-1
        
        for i in range(len(mat)):
		    # Add primary diagonal.
            total += mat[i][i]
			# Add the secondary but avoid the middle point that overlaps the primary.
            if i != n-i:
                total += mat[i][n-i]
            
        return total
