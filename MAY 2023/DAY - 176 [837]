** 837. New 21 Game **

# Approach 1:
class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        dp = [0] * (n+1)
        dp[0] = 1
        s = 1 if k > 0 else 0
        for num in range(1, n+1):
            dp[num] = s / maxPts

            if num < k:
                s += dp[num]
            if num - maxPts >= 0 and num - maxPts < k:
                s -= dp[num-maxPts]
        return sum(dp[k:])

# Approach 2:
class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        if k==0:
            return 1.0

        windowsum=0
        for i in range(k,k + maxPts):
            windowsum+= 1 if i<=n else 0

        dp={}
        for i in range(k-1,-1,-1):
            dp[i]=windowsum/maxPts
            remove=0
            if i+maxPts<=n:
                remove=dp.get(i+maxPts,1)
            windowsum+= dp[i]-remove
        return dp[0] 

# Approach 3:
class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        dp = [1.0] + [0] * n
        Wsum = 1.0
        if k == 0 or n >= k + maxPts:
            return 1
        for i in range(1, n+1):
            dp[i] = Wsum/maxPts
            if i < k:
                Wsum += dp[i]
            if i >= maxPts:
                Wsum -= dp[i-maxPts]
        return sum(dp[k:])
