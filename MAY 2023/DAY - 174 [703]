** 703. Kth Largest Element in a Stream **

# Approach 1:
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.nums=nums
        self.k=k
        

    def add(self, val: int) -> int:
        self.nums.append(val)
        self.nums.sort()
        return self.nums[-self.k]

# Approach 2:
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.heap=[]
        self.k=k
        self.buildheap(nums)
        
    def buildheap(self,nums):
        for num in nums:
            heapq.heappush(self.heap, num)
            if len(self.heap) > self.k:
                heapq.heappop(self.heap)

    def add(self, val: int) -> int:
        heapq.heappush(self.heap, val)        
        if len(self.heap) > self.k:
            heapq.heappop(self.heap)
        return self.heap[0]

# Approach 3:
import bisect

class KthLargest:
    def __init__(self, k: int, nums: list[int]):
        self.k = k
        self.nums = sorted(nums)

    def add(self, val: int) -> int:
        bisect.insort_right(self.nums, val)
        return self.nums[-self.k]
