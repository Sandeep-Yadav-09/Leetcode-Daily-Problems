** 309. Best Time to Buy and Sell Stock with Cooldown **

# Approach 1 :
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
		# initialization
        cool_down, sell, hold = 0, 0, -float('inf')
        
        for stock_price_of_Day_i in prices:
            
            prev_cool_down, prev_sell, prev_hold = cool_down, sell, hold
            
            # Max profit of cooldown on Day i comes from either cool down of Day_i-1, or sell out of Day_i-1 and today Day_i is cooling day
            cool_down = max(prev_cool_down, prev_sell)
            
            # Max profit of sell on Day_i comes from hold of Day_i-1 and sell on Day_i
            sell = prev_hold + stock_price_of_Day_i
            
            # Max profit of hold on Day_i comes from either hold of Day_i-1, or cool down on Day_i-1 and buy on Day_i
            hold = max(prev_hold, prev_cool_down - stock_price_of_Day_i)
        
        
        # The action of final trading day must be either sell or cool down
        return max(sell, cool_down)
        
# Approach 2 :
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        size = len(prices)
        if size < 2: return 0
        hold, unhold, cooldown = float('-inf'),0,0
        for price in prices:
            hold=max(hold,cooldown-price)
            cooldown = max(cooldown, unhold)
            unhold=max(unhold,hold+price)
        return unhold
# Approach 3 :
class Solution:
    def maxProfit(self, prices: List[int]) -> int:        
        DP = {}
        def stock(i, buy):
            if i >= len(prices):
                return 0
            
            if (i, buy) in DP:
                return DP[(i, buy)]
            
            if buy:
                j = i
                while j < len(prices)-1 and prices[j] > prices[j+1]:    #look for local min
                    j += 1
                b = stock(j+1, not buy) - prices[j]    #buy at local min
                c = stock(j+1, buy)  
                DP[(i, buy)] = max(b, c)
            
            else:
                s = stock(i+2, not buy) + prices[i]
                c = stock(i+1, buy)
                DP[(i, buy)] = max(s, c)
            
            return DP[(i, buy)]
        
        return stock(0, True)
