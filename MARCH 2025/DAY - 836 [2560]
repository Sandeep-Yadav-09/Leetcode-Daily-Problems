** 2560. House Robber IV **

# Approach 1:
class Solution:
    def minCapability(self, nums: List[int], k: int) -> int:
        n = len(nums)
        x0, xM =  min(nums), max(nums)
        def f(cap):
            steal, i = 0, 0
            while i<n and steal<=k:
                if nums[i] <= cap:
                    steal += 1
                    i += 1
                i += 1
            return steal >= k

        l, r = x0, xM
        while l<r:
            m=(l+r)>>1
            if f(m):
                r = m
            else:
                l=m+1
        return l

# Approach 2:
class Solution:
    def minCapability(self, nums: List[int], k: int) -> int:
        left, right = min(nums), max(nums)
        n = len(nums)
        
        while left < right:
            middle = (left + right) // 2
            thefts = 0
            index = 0

            while index < n:
                if nums[index] <= middle:
                    thefts += 1
                    index += 2  
                else:
                    index += 1

            if thefts >= k:
                right = middle  
            else:
                left = middle + 1  
                
        return left
