** 2401. Longest Nice Subarray **

# Approach 1:
class Solution:
    def longestNiceSubarray(self, nums: List[int]) -> int:
        
        n, ans, B, l = len(nums), 0, 0, 0

        for r, x in enumerate(nums):
            while l<r and (B& x)!=0:
                B^=nums[l]
                l+=1
            B|=x
            ans=max(ans, r-l+1)
        return ans

# Approach 2:
class Solution:
    def longestNiceSubarray(self, nums: list[int]) -> int:
        used_bits = 0  
        window_start = 0  
        max_length = 0  

        for window_end in range(len(nums)):
            while used_bits & nums[window_end] != 0:
                used_bits ^= nums[window_start]
                window_start += 1  

            used_bits |= nums[window_end]
            max_length = max(max_length, window_end - window_start + 1)

        return max_length
