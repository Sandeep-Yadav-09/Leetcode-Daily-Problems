** 3356. Zero Array Transformation II **

# Approach 1:
class Solution:
    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        n, m = len(nums), len(queries)
        freq=[0]*(n+1)
        op, k=0, 0
        for i in range(n):
            while op<nums[i]-freq[i]:
                if k>=m: 
                    return -1
                l, r, v=queries[k]
                if r<i:
                    k+=1 
                    continue
                freq[max(l, i)]+=v
                freq[r+1]-=v
                k+=1
            op+=freq[i]
        return k 

# Approach 2:
from typing import List

class Solution:
    def isZeroArray(self, nums: List[int], queries: List[List[int]], k: int) -> bool:
        n = len(nums)
        prefix = [0] * (n + 1)

        for i in range(k):
            l, r, val = queries[i]
            prefix[l] += val
            if r + 1 < n:
                prefix[r + 1] -= val

        for i in range(1, n + 1):
            prefix[i] += prefix[i - 1]

        return all(prefix[i] >= nums[i] for i in range(n))

    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -> int:
        low, high, n = 0, len(queries), len(queries)
        ans = n + 1

        while low <= high:
            mid = (low + high) // 2
            if self.isZeroArray(nums, queries, mid):
                ans = mid
                high = mid - 1
            else:
                low = mid + 1

        return -1 if ans > n else ans
