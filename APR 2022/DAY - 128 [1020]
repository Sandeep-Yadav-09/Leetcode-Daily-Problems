** 1020. Number of Enclaves **

# Approach 1:
class Solution:
    def numEnclaves(self, A: List[List[int]]) -> int:
        M, N = len(A), len(A[0])
        visited = set()
        
        def dfs(i, j):
            # if we did not visit the cell already and the cell is land
            if (i, j) in visited:
                return
            visited.add((i, j))
            
            # loop through the 4 directions to the neighbors
            for (di, dj) in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                ni, nj = i + di, j + dj
                if 0 <= ni < M and 0 <= nj < N and A[ni][nj]:
                    dfs(ni, nj)
        
        # start the dfs search from all the cells on the boundary 
        for i in range(M):
            for j in range(N):
                if (i == 0 or i == M -1 or j == 0 or j == N - 1) and A[i][j]:
                    dfs(i, j)
        
        # the final result is the total of all land cells minus the number we visited            
        return sum(sum(row) for row in A) - len(visited)

# Approach 2:
class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        def dfs(i, j):
            grid[i][j] = 0
            for x, y in (i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1):
                if 0 <= x < m and 0 <= y < n and grid[x][y]:
                    dfs(x, y)
        m, n = len(grid), len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1 and (i == 0 or j == 0 or i == m - 1 or j == n - 1):
                    dfs(i, j)
        return sum(sum(row) for row in grid)

# Approach 3:
class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        n=len(grid)
        m=len(grid[0])
        def dfs(i,j):
            if i==-1 or j==-1 or i==n or j==m or grid[i][j]==0:
                return 
            grid[i][j]=0
            dfs(i+1,j)
            dfs(i-1,j)
            dfs(i,j+1)
            dfs(i,j-1)

        for i in range(n):
            for j in range(m):
                if (i==0 or j==0 or n-1==i or m-1==j) and grid[i][j]==1:
                    dfs(i,j)
        s=0
        for i in range(n):
            for j in range(m):
                s+=grid[i][j]
        return s
