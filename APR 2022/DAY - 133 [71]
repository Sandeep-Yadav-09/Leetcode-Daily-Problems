** 71. Simplify Path **

# Approach 1:
class Solution:
    def simplifyPath(self, path: str) -> str:
        strs = path.split('/')
        res = []
        for s in strs:
            if s == '..':
                if res:
                    res.pop()
            elif s.isalpha() or (s and s!='.'):
                res.append(s)
        return '/' + '/'.join(res)

# Approach 2:
class Solution:
    def simplifyPath(self, path: str) -> str:
        # Split path into a list of directory names
        dirs = path.split('/')
        # Initialize the stack of directories
        stack = []
        # Iterate through the directories
        for d in dirs:
            # Ignore double slashes
            if d == '':
                continue
            # If it's a double period, pop the top directory from the stack
            elif d == '..':
                if stack:
                    stack.pop()
            # If it's a single period or a regular directory name, add it to the stack
            elif d != '.':
                stack.append(d)
        # Construct the simplified canonical path
        simplified_path = '/' + '/'.join(stack)
        return simplified_path

# Approach 3:
class Solution:
    def simplifyPath(self, path):
        dir_stack = []
        path = path.split("/")
        for elem in path:
            if dir_stack and elem == "..":
                dir_stack.pop()
            elif elem not in [".", "", ".."]:
                dir_stack.append(elem)
                
        return "/" + "/".join(dir_stack)
