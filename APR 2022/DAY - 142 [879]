** 879. Profitable Schemes **

# Approach 1:
class Solution:
    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:
        MOD = 10**9 + 7
        dp = [[0] * (n + 1) for i in range(minProfit + 1)]
        dp[0][0] = 1
        for g, p in zip(group, profit):
            for i in range(minProfit, -1, -1):
                for j in range(n - g, -1, -1):
                    dp[min(i + p, minProfit)][j + g] += dp[i][j]
                    dp[min(i + p, minProfit)][j + g] %= MOD
        return sum(dp[minProfit]) % MOD

# Appraoch 2:
class Solution:
    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:
        m=len(group)
        dp=[[[0]*(minProfit+1) for _ in range(n+1)] for _ in range(m+1)]
        for j in range(n+1):
            dp[m][j][0]=1

        for i in range(m-1,-1,-1):
            for j in range(n+1):
                for k in range(minProfit+1):
                    dp[i][j][k]=dp[i+1][j][k]
                    if group[i]<=j:
                        dp[i][j][k]+=dp[i+1][j-group[i]][max(0,k-profit[i])]
                    dp[i][j][k]%=10**9+7

        return dp[0][n][minProfit]

# Approach 3:
class Solution:
    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:
        @cache
        def dfs(i, members, cur_profit):

            if i >= len(profit):
                if cur_profit >= minProfit and members <= n:
                    return 1
                else:
                    return 0
                   
                
            ans = 0
            ans += dfs(i + 1, members, cur_profit)
            
            if members + group[i] <= n:

                ans += dfs(i + 1, members + group[i], min(cur_profit + profit[i], minProfit))
        
            return ans
            
        return dfs(0, 0, 0) % (10**9 + 7)
