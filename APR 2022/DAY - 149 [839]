** 839. Similar String Groups **

# Approach 1:
class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:

        n = len(strs)
        
        par = {i: i for i in range(n)}
        rank = {i: 1 for i in range(n)}
        
        def find(n1):
            while n1 != par[n1]:
                par[n1] = par[par[n1]]
                n1 = par[n1]
            return n1
        
        def union(n1, n2):
            p1, p2 = find(n1), find(n2)
            if p1 == p2:
                return 0
            if rank[p1] < rank[p2]:
                p1, p2 = p2, p1
            par[p2] = p1
            rank[p1] += rank[p2]
            return 1
        
        def similar(s, d):
            return sum(i != j for i, j in zip(s, d)) in {0, 2}
        
        for i in range(n):
            for j in range(i + 1, n):
                if similar(strs[i], strs[j]):
                    union(i, j)
        
        return sum(i == find(i) for i in range(n))

# Approach 2:
class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        groups = 0
        n = len(strs)
        vis = [False] * n
        for i in range(n):
            if vis[i]: continue
            groups += 1
            self.dfs(i, strs, vis)
        return groups

    def dfs(self, i: int, strs: List[str], vis: List[bool]) -> None:
        vis[i] = True
        for j in range(len(strs)):
            if vis[j]: continue
            if self.is_similar(strs[i], strs[j]):
                self.dfs(j, strs, vis)

    def is_similar(self, a: str, b: str) -> bool:
        count = 0
        for i in range(len(a)):
            if a[i] != b[i]: count += 1
        return count == 2 or count == 0

# Approach 3:
from collections import deque

def compare(s1, s2):
    N = len(s1)
    idx1 = -1
    idx2 = -1
    for i in range(N):
        ch1, ch2 = s1[i], s2[i]
        if ch1 != ch2:
            if idx1 == -1:
                idx1 = i
            elif idx2 == -1:
                idx2 = i
            else:
                return False

    if idx1 == -1:
        return True

    if idx2 == -1:
        return False

    return s1[idx1] == s2[idx2] and s1[idx2] == s2[idx1]

class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        N = len(strs)
        graph = [[] for _ in range(N)]
        for i in range(N):
            for j in range(i+1, N):
                if compare(strs[i], strs[j]):
                    graph[i].append(j)
                    graph[j].append(i)

        visited = [False for _ in range(N)]                    
        ans = 0
        for i in range(N):
            if visited[i]:
                continue
            ans += 1                
            q = deque([i])
            while len(q) > 0:
                u = q.popleft()
                if visited[u]:
                    continue
                visited[u] = True
                for v in graph[u]:
                    if visited[v]:
                        continue
                    q.append(v)                        

        return ans
