** 662. Maximum Width of Binary Tree **

# Approach 1:
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        # Treat tree as Heap array and save idx as 2*i and 2*i + 1
        # diff of first and last node when level ends is the result
        
        q = [(root, 1)]
        
        res = 1
        lastNode = root
        while len(q) > 0:
            node, idx = q.pop(0)
            
            if node.left:
                q.append((node.left, idx * 2))
            if node.right:
                q.append((node.right, idx * 2 + 1))
        
            if node == lastNode:
                if len(q) > 0:
                    res = max(res, q[-1][1] - q[0][1] + 1)
                    lastNode = q[-1][0]
                    
        return res

# Approach 2:
from collections import defaultdict

class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        di = defaultdict(list)
        def dfs(node, level, column):
            if node:
                di[level].append(column)
                dfs(node.left, level+1, column*2)
                dfs(node.right, level+1, column*2+1)
        dfs(root, 0 , 0)
        return max([max(di[level]) - min(di[level]) +1 for level in di])

# Approach 3:
from collections import defaultdict

class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        #queue for keeping track
        q = [(0, root)]
        ans = 0
        while q:
            n = len(q)
            # nodes list to store indexes of all nodes at a level
            nodes = []
            for _ in range(n):
                idx, node = q.pop(0)
                nodes.append(idx)
                if node.left:
                    q.append((2*idx+1 , node.left))
                if node.right:
                    q.append((2*idx+2 , node.right))
            # max of ans or (right-most index - left-most index + 1) for a level
            ans = max(ans, max(nodes)-min(nodes)+1)
        return ans
