** 958. Check Completeness of a Binary Tree **

# Approach 1:
class Solution:
    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:
        q = deque()
        q.append(root)
        
        while q:
            node = q.popleft()
            
            if not node and q:
                return not any(q)
            elif node:
                q.append(node.left)
                q.append(node.right)
            
        return True

# Approach 2:
class Solution:
    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:
        queue = collections.deque([root])
        is_null_in_between_nodes = False
        while queue:
            total_nodes_in_level = len(queue)
            for i in range(total_nodes_in_level):
                curr_node = queue.popleft()
                if curr_node is None:
                    is_null_in_between_nodes = True
                else:
                    if is_null_in_between_nodes:
                        return False
                    queue.append(curr_node.left)
                    queue.append(curr_node.right)
        return True
        
# Approach 3:
class Solution:
    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:
        Q = collections.deque([root])
        
        while Q[0]:
            u = Q.popleft()
            Q.append(u.left)
            Q.append(u.right)
        return not any(Q)
