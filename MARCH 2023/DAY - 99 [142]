** 142. Linked List Cycle II **

# Approach 1:
class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        fast, slow = head, head
        while(fast and fast.next):
            fast = fast.next.next
            slow = slow.next
            if(fast == slow):
                slow = head
                while(slow is not fast):
                    fast = fast.next
                    slow = slow.next
                return slow
        return None

# Approach 2:
class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        slow = head
        fast = head
        if not head:
            return None
        if not head.next:
            return None
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            
            if fast == slow:
                break
        if fast == slow:
            while fast != head:
                fast = fast.next
                head = head.next
            return head
        else:
            return None

# Approach 3:
class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Initialize pointers at head of linkedlist...
        p1 = p2 = head
        # Run a loop until p2 and p2.next is equal to null...
        while p2 and p2.next:
            # Moving p1 by 1 & p2 by 2
            p1, p2 = p1.next, p2.next.next
            # found the cycle...
            if p1 == p2: break
        # In case there is no cycle or no meeting point...
        else: return None
        # run loop until again head & p1 don't collab...
        while head != p1:
            # Moving head by 1 & p1 by 1 as well...
            head, p1 = head.next, p1.next
        return head     # Or return p1, they both will return the tail where cycle starts...
