** 1472. Design Browser History **

# Approach 1:
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
        self.prev = None
        
class BrowserHistory:

    def __init__(self, homepage: str):
        self.root = ListNode(homepage)

    def visit(self, url: str) -> None:
        node = ListNode(url)
        node.prev = self.root
        self.root.next = node
        self.root = self.root.next

    def back(self, steps: int) -> str:
        while(steps and self.root.prev):
            self.root = self.root.prev
            steps -= 1
        return self.root.val

    def forward(self, steps: int) -> str:
        while(steps and self.root.next):
            self.root = self.root.next
            steps -= 1
        return self.root.val

# Your BrowserHistory object will be instantiated and called as such:
# obj = BrowserHistory(homepage)
# obj.visit(url)
# param_2 = obj.back(steps)
# param_3 = obj.forward(steps)

# Approach 2:
from collections import deque

class BrowserHistory:

    def __init__(self, homepage: str):
	
        self.history = deque([homepage])
        self.cur_index = 0

        
        
    def visit(self, url: str) -> None:
        
        # clear all forward history
        tail_len = len(self.history)-1-self.cur_index
        while tail_len:
            self.history.pop()
            tail_len -= 1
            
        self.history.append(url)
        self.cur_index += 1

        
        
    def back(self, steps: int) -> str:
        
		# boundary check
        if steps > self.cur_index:
            self.cur_index = 0
        else:
            self.cur_index -= steps
            
        return self.history[self.cur_index]

    
    
    def forward(self, steps: int) -> str:
        
		# boundary check
        if steps >= len(self.history) - self.cur_index:
            self.cur_index = len(self.history) - 1
        else:
            self.cur_index += steps
        
        return self.history[self.cur_index]
