** 2444. Count Subarrays With Fixed Bounds **

# Approach 1:
class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        n = len(nums)
        leftBound = -1
        lastMin, lastMax = -1, -1
        count = 0
        
        for i in range(n):
            if nums[i] >= minK and nums[i] <= maxK:
                lastMin = i if nums[i] == minK else lastMin
                lastMax = i if nums[i] == maxK else lastMax
                count += max(0, min(lastMin, lastMax) - leftBound)
            else:
                leftBound = i
                lastMin = -1
                lastMax = -1
        
        return count

# Approach 2:
class Solution:
    def countSubarrays(self, nums, minK, maxK):
        minfound = maxfound = False
        start = minstart = maxstart = 0
        total = 0

        for i in range(len(nums)):
            if nums[i] == minK:
                minstart = i
                minfound = True
            if nums[i] == maxK:
                maxstart = i
                maxfound = True
            if not minK <= nums[i] <= maxK:
                minfound = maxfound = False
                start = i+1
            if minfound and maxfound:
                total += min(minstart,maxstart) - start + 1

        return total

# Approach 3:
from typing import List

class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        result = 0
        left_index = right_index = bad_index = -1
        
        for i, num in enumerate(nums):
            if not minK <= num <= maxK:
                bad_index = i
            if num == minK:
                left_index = i
            if num == maxK:
                right_index = i
            result += max(0, min(left_index, right_index) - bad_index)
        
        return result
