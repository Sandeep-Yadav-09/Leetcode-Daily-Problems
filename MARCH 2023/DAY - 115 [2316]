** 2316. Count Unreachable Pairs of Nodes in an Undirected Graph **

# Approach 1:
class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:
        def dfs(node):
            if visited[node]:
                return 0
            visited[node] = True
            res = 1
            for nbr in graph[node]:
                res += dfs(nbr)
            return res
        graph = {}
        for i in range(n):
            graph[i] = []
        for edge in edges:
            graph[edge[0]].append(edge[1])
            graph[edge[1]].append(edge[0])
            
        visited = [False for _ in range(n)]
        components = []
        for node in range(n):
            if visited[node] == False:
                components.append(dfs(node))   
        
        ans = n * (n - 1) // 2
        for k in components:
            ans -= k * (k - 1) // 2
        
        return ans

# Approach 2:
class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:        
        def union(x: int, y: int) -> None:
            def find(x: int) -> int:
                while x != id[x]:     # if x is not root, keep tracing the root.
                    id[x] = id[id[x]] # Path compression.
                    x = id[x]         # trace root.
                return x              # Root found.
    
            rx, ry = map(find, (x, y)) # Find the roots of x and y. 
            if rx != ry:               # Different roots means there are not in same group. 
                # Merge smaller group into bigger group. => Weighted Quick Union.
                if sz[rx] > sz[ry]:
                    sz[rx] += sz[ry]
                    id[ry] = id[rx]
                    roots.discard(ry) # smaller group root removed after union.
                else:
                    id[rx] = id[ry]
                    sz[ry] += sz[rx]
                    roots.discard(rx)
                    
        id = list(range(n)) # Initialize the root of each vertex as itself.
        sz = [1] * n        # Initialize the size of each group as 1.
        roots = {*range(n)} # Initialize the root of each vertex as itself.
        for a, b in edges:
            union(a, b)     # Perform Union Find.
        pairs = 0    
        for r in roots:     # Traverse roots.
            n -= sz[r]      # Number of the total size of non-visited groups.
            pairs += n * sz[r] # Add the pairs between group r and non-visited groups.
        return pairs

# Approach 3:
class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:
        # Build the adjacency list of the graph
        adjList = [[] for _ in range(n)]
        for u, v in edges:
            adjList[u].append(v)
            adjList[v].append(u)

        visited = [False] * n
        sizes = [0] * n
        for i in range(n):
            if not visited[i]:
                sizes[i] = self.dfs(i, adjList, visited)

        ans = 0
        sum = 0
        for size in sizes:
            ans += sum * size
            sum += size

        return ans

    def dfs(self, u: int, adjList: List[List[int]], visited: List[bool]) -> int:
        visited[u] = True
        size = 1
        for v in adjList[u]:
            if not visited[v]:
                size += self.dfs(v, adjList, visited)
        return size
