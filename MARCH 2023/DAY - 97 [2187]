** 2187. Minimum Time to Complete Trips **

# Approach 1:
class Solution:
    def minimumTime(self, time: List[int], totalTrips: int) -> int:
        lo, hi = 0, 10 ** 14
        while lo < hi:
            need = lo + (hi - lo) // 2
            trips = sum(need // t for t in time)
            if trips < totalTrips:
                lo = need + 1
            else:
                hi = need
        return lo

# Approach 2:
class Solution:
    def minimumTime(self, time: List[int], totalTrips: int) -> int:
	    return bisect_left(range(1, 10**14), totalTrips, key= lambda x: sum(x // t for t in time)) + 1

# Approach 3:
class Solution:
    def minimumTime(self, time: List[int], totalTrips: int) -> int:
        # Initialize the search range for minimum completion time
        l = 1
        r = min(time) * totalTrips

        # Binary search for minimum completion time
        while l < r:
            # Calculate the midpoint of the search range
            m = (l + r) // 2
            # Count the number of tasks that can be completed within m time
            if sum(m // t for t in time) >= totalTrips:
                # If enough tasks can be completed within m time, search for smaller time
                r = m
            else:
                # If not enough tasks can be completed within m time, search for larger time
                l = m + 1

        # Return the minimum completion time
        return l
