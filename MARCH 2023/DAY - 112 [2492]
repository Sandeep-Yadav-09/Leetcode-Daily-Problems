** 2492. Minimum Score of a Path Between Two Cities **

# Approach 1:
class Solution:
    def minScore(self, n: int, roads: List[List[int]]) -> int:
        
        graph = defaultdict(dict)
        for u, v, w in roads:
            graph[u][v] = graph[v][u] = w
        
        min_score = float('inf')
        visited = set()
        queue = deque([1])

        while queue:
            node = queue.popleft()
            for adj, score in graph[node].items():
                if adj not in visited:
                    queue.append(adj)
                    visited.add(adj)
                min_score = min(min_score, score)
                
        return min_score

# Approach 2:
class Solution:
    def minScore(self, n: int, roads: List[List[int]]) -> int:
        dp=list(range(n+1))

        def find(x):
            if dp[x]!=x:dp[x]=find(dp[x])
            return dp[x]
        
        cost=collections.defaultdict(lambda: float('inf'))
        
        for i,j,k in roads:  
            i,j=find(i),find(j)                    
            cost[j]=min([cost[j],cost[i],k])
            dp[i]=dp[j]
                
        return cost[find(1)]

# Approach 3:
class Solution:
    def minScore(self, n: int, edges: List[List[int]]) -> int:        
        graph = defaultdict(dict)
        for u, v, w in edges:
            graph[u][v] = graph[v][u] = w
        
        min_score = float('inf')
        visited = set()
        queue = deque([1])

        while queue:
            node = queue.popleft()
            for adj, score in graph[node].items():
                if adj not in visited:
                    queue.append(adj)
                    visited.add(adj)
                min_score = min(min_score, score)
                
        return min_score
