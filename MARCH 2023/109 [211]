** 211. Design Add and Search Words Data Structure **

# Approach 1:
class WordDictionary:

    def __init__(self):
        self.children = [None]*26
        self.isCompleteWord = False
        

    def addWord(self, word: str) -> None:
        curr = self
        for c in word:
            if curr.children[ord(c) - ord('a')] == None:
                curr.children[ord(c) - ord('a')] = WordDictionary()
            curr = curr.children[ord(c) - ord('a')]
        
        curr.isCompleteWord = True
        

    def search(self, word: str) -> bool:
        curr = self
        for i in range(len(word)):
            c = word[i]
            if c == '.':
                for ch in curr.children:
                    if ch != None and ch.search(word[i+1:]): return True
                return False
            
            if curr.children[ord(c) - ord('a')] == None: return False
            curr = curr.children[ord(c) - ord('a')]
        
        return curr != None and curr.isCompleteWord

# Approach 2:
class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_word = False
        
class WordDictionary:
    def __init__(self):
        self.root = TrieNode()      

    def addWord(self, word):
        current_node = self.root
        for character in word:
            current_node = current_node.children.setdefault(character, TrieNode())
        current_node.is_word = True
        
    def search(self, word):
        def dfs(node, index):
            if index == len(word):
                return node.is_word
               
            if word[index] == ".":
                for child in node.children.values():
                    if dfs(child, index+1):
                        return True
                    
            if word[index] in node.children:
                return dfs(node.children[word[index]], index+1)
            
            return False
    
        return dfs(self.root, 0)

# Approach 3:
class WordDictionary:
        def __init__(self):

            self.words = defaultdict(list)


        def addWord(self, word: str) -> None:

            self.words[len(word)].append(word)


        def search(self, word: str) -> bool:

            n = len(word)

            if '.' in word:
                
                for w in self.words[n]:
                    if all(word[i] in (w[i], '.') for i in range(n)):
                        return True

                else: return False

            return word in self.words[n]
