** 912. Sort an Array **

# Approach 1:
class Solution:
    def merge_sort(self, nums):
        if len(nums) <= 1:
            return nums
        mid = len(nums) // 2
        left = self.merge_sort(nums[:mid])
        right = self.merge_sort(nums[mid:])
        return self.merge(left, right)

    def merge(self, left, right):
        i = j = 0
        merged = []
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
        merged += left[i:]
        merged += right[j:]
        return merged

    def sortArray(self, nums):
        return self.merge_sort(nums)
        
# Approach 2:
class Solution:
    def sortArray(self, N: List[int]) -> List[int]:
        L = len(N)
        for i in range(1,L): bisect.insort_left(N, N.pop(i), 0, i)
        return N

# Appraoch 3:
class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        #shell
        sub = len(nums) // 2
        while sub > 0:
            for start in range(sub):
                self.shell(nums, start, sub)
            sub = sub // 2
        return nums
    
    def shell(self, alist, start, gap):
        for i in range(start+gap, len(alist), gap):
            current = alist[i]
            position = i
            while position >= gap and alist[position-gap] > current:
                alist[position] = alist[position-gap]
                position -= gap
            alist[position] = current
