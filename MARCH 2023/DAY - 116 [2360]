** 2360. Longest Cycle in a Graph **

# Approach 1:
class Solution:
    def longestCycle(self, edges: List[int]) -> int:
        longest_cycle_len = -1
        time_step = 1
        node_visited_at_time = [0] * len(edges)

        for current_node in range(len(edges)):
            if node_visited_at_time[current_node] > 0:
                continue
            start_time = time_step
            u = current_node
            while u != -1 and node_visited_at_time[u] == 0:
                node_visited_at_time[u] = time_step
                time_step += 1
                u = edges[u]
            if u != -1 and node_visited_at_time[u] >= start_time:
                longest_cycle_len = max(longest_cycle_len, time_step - node_visited_at_time[u])

        return longest_cycle_len

# Approach 2:
class Solution:
  def longestCycle(self, edges: List[int]) -> int:
    ans = -1  # Initialize the answer to -1
    time = 1  # Initialize the current time step to 1
    timeVisited = [0] * len(edges)  # Initialize a list to store the time at which each node was first visited

    # Iterate through each node in the graph
    for i, edge in enumerate(edges):
      if timeVisited[i]:  # If the node has already been visited, skip it
        continue
      startTime = time  # Record the start time of the current traversal
      u = i  # Initialize the current node to the ith node
      # Traverse the graph until the end of the path is reached or a visited node is encountered
      while u != -1 and not timeVisited[u]:
        timeVisited[u] = time  # Record the current time step
        time += 1  # Increment time
        u = edges[u]  # Move to the next node in the path
      # If a cycle is found that includes the current node, update the answer
      if u != -1 and timeVisited[u] >= startTime:
        ans = max(ans, time - timeVisited[u])

    return ans  # Return the length of the longest cycle found

# Approach 3:
class Solution:
    def longestCycle(self, edges: List[int]) -> int:
        in_d = set()
        out_d = set()
        for i, j in enumerate(edges):
            if j != -1:
                in_d.add(j)
                out_d.add(i)
        potential = in_d & out_d
        visited = set()
        self.ans = -1
        def dfs(node, curr, v):
            visited.add(node)
            v[node] = curr
            nei = edges[node]
            if nei in v:
                self.ans = max(self.ans, curr - v[nei] + 1)
                visited.add(nei)
                return
            if nei not in visited and nei in potential:
                dfs(nei, curr + 1, v)
        for node in potential:
            dfs(node, 1, {})
        return self.ans
