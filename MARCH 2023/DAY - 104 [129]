** 129. Sum Root to Leaf Numbers **

# Approach 1:
class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        def helper(node, num):
            if node is None:
                return 0
            num = num * 10 + node.val
            if node.left is None and node.right is None:
                return num
            return helper(node.left, num) + helper(node.right, num)
        
        return helper(root, 0)

# Approach 2:
class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        self.ans = 0
        
        def dfs(cur_node: Optional[TreeNode], num: int):
            if not cur_node.left and not cur_node.right:
                self.ans += num * 10 + cur_node.val
                return
            
            if cur_node.left:
                dfs(cur_node.left, num * 10 + cur_node.val)
            
            if cur_node.right:
                dfs(cur_node.right, num * 10 + cur_node.val)
            
        dfs(root, 0)
        
        return self.ans

# Approach 3:
class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        # Define a recursive function to traverse the tree and sum up the numbers
        def dfs(node, path_sum):
            if not node:
                return 0
            # Add the current node's value to the path sum
            path_sum = path_sum * 10 + node.val
            # If this is a leaf node, return the path sum
            if not node.left and not node.right:
                return path_sum
            # Otherwise, recursively traverse the left and right subtrees
            return dfs(node.left, path_sum) + dfs(node.right, path_sum)
        
        # Call the recursive function on the root node with an initial path sum of 0
        return dfs(root, 0)
