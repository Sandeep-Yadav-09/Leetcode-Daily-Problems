** 2402. Meeting Rooms III **

# Approach 1:
class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        busy=[]
        available=[i for i in range(n)]
        count=[0]*n
        meetings.sort()
        for start,end in meetings:
            while busy and busy[0][0]<=start:
                _end,room=heapq.heappop(busy)
                heapq.heappush(available,room)

            if available:
                room=heapq.heappop(available)
                heapq.heappush(busy,(end,room))
            else:
                time,room=heapq.heappop(busy)
                heapq.heappush(busy,(time+end-start,room))
            count[room]+=1
        return count.index(max(count))      

# Approach 2:
class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        meetings = sorted(meetings, key=lambda x: x[0])
        rooms_booked_up_to = [0] * n
        rooms_counts = [0] * n
        for m in meetings:
            found_room = False
            mi, mi_index = 10**10, None
            for i in range(n):
                if m[0] >= rooms_booked_up_to[i]:
                    rooms_booked_up_to[i] = m[1]
                    rooms_counts[i] += 1
                    found_room = True
                    break
                else:
                    if rooms_booked_up_to[i] < mi:
                        mi, mi_index = rooms_booked_up_to[i], i
            
            if not found_room:
                rooms_booked_up_to[mi_index] = rooms_booked_up_to[mi_index] - m[0] + m[1]
                rooms_counts[mi_index] += 1
        
        return max(enumerate(rooms_counts), key=lambda x: x[1])[0]
