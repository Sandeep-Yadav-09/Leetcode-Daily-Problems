** 368. Largest Divisible Subset **

# Approach 1:
class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        subsets = {-1: set()}
        
        for num in sorted(nums):
            subsets[num] = max([subsets[k] for k in subsets if num % k == 0], key=len) | {num}
        
        return list(max(subsets.values(), key=len))

# Approach 2:
class Solution:
  def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
    if not nums:
        return []
        
    nums.sort()
    
    dp = [1] * len(nums)
    
    prev = [-1] * len(nums)
    
    max_size = 1
    max_index = 0
    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0 and dp[j] + 1 > dp[i]:
                dp[i] = dp[j] + 1
                prev[i] = j
        if dp[i] > max_size:
            max_size = dp[i]
            max_index = i
    
    result = []
    while max_index != -1:
        result.append(nums[max_index])
        max_index = prev[max_index]
    
    return result[::-1]
