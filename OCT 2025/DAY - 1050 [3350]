** 3350. Adjacent Increasing Subarrays Detection II **

# Approach 1:
class Solution:
    def calcIncLen(self, nums):
        n = len(nums)
        L = [1] * n
        for i in range(n - 2, -1, -1):
            if nums[i] < nums[i + 1]:
                L[i] = L[i + 1] + 1
        return L

    def check(self, L, k):
        n = len(L)
        for i in range(n - 2 * k + 1):
            if L[i] >= k and L[i + k] >= k:
                return True
        return False

    def maxIncreasingSubarrays(self, nums: List[int]) -> int:
        n = len(nums)
        L = self.calcIncLen(nums)
        low, high, ans = 1, n // 2, 0

        while low <= high:
            mid = (low + high) // 2
            if self.check(L, mid):
                ans = mid
                low = mid + 1
            else:
                high = mid - 1
        return ans

# Approach 2:
class Solution:
    def maxIncreasingSubarrays(self, nums: List[int]) -> int:
        n = len(nums)
        i = 0
        ans = 1
        while i < n:
            j = i
            while j + 1 < n and nums[j] < nums[j+1]: j+=1
            ans = max(ans, (j-i+1) // 2)
            k = j+1
            while k + 1 < n and nums[k] < nums[k+1]: k+=1
            ans = max(ans, min(j-i+1, k-j))
            i = j+1
        return ans
