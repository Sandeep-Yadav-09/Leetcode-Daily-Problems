** 2389. Longest Subsequence With Limited Sum **

# Approach 1 :
class Solution:
    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:

        nums.sort()                          #   Example: nums = [4,5,2, 1] queries = [3,10,21]
                                             # After sorting:    [1,2,4, 5]
        pref = list(accumulate(nums))        #            pref = [1,3,7,12]

                                             #   q                  maxseq      ans
        ans = []                             #  –––                 ––––––   –––––––––
        for q in queries:                    #   3   [1,3/\7, 12]      2       [2]
            maxseq = bisect_right(pref, q)   #  10   [1,3, 7/\12]      3       [2,3]
            ans.append(maxseq)               #  21   [1,3,7,12/\]      4       [2,3,4]
        return ans
        
# Approach 2 :
class Solution:
    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:
        ans=[]
        nums.sort()
        for q in queries:
            s=0 #sum of subsequence
            l=0 #length of subsequence
            for i in nums:
                if s+i<=q: #check before adding the element.
                    s=s+i
                    l=l+1
                else:
                    break
            ans.append(l)
        return ans
        
# Approach 3 :
class Solution: 
    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:
        prefix = list(accumulate(sorted(nums)))
        return [bisect_right(prefix, q) for q in queries]
