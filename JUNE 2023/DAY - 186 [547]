** 547. Number of Provinces **

# Approach 1:
class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        N = len(isConnected)
        visited = set()
        def dfs(cityI):
            cityIConnections = isConnected[cityI]
            visited.add(cityI)
            for cityJ in range(N):
                if (cityJ not in visited) and (cityIConnections[cityJ] == 1) and (cityI != cityJ):
                    dfs(cityJ)
            return 
        numProvinces = 0
        for cityI in range(N):
            if cityI not in visited:
                dfs(cityI)
                numProvinces += 1
        return numProvinces

# Approach 2:
class Solution:
    def findCircleNum(self, cnx: List[List[int]]) -> int:
        res=0
        n=len(cnx)
        def dfs(i):
            cnx[i][i]=2
            for j in range(0,n):
                if cnx[i][j]==1:
                    cnx[i][j]=2
                    dfs(j)
        for i in range(0,n):
            if cnx[i][i]==1:
                res+=1
                dfs(i)
        return res

# Approach 3:
class Solution:
    def __init__(self):
        self.cities_visited = set()

    def bfs(self, city, cities_graph):
        self.cities_visited.add(city)
        queue = [city]
        while queue:
            c = queue.pop(0)
            for i in cities_graph[c]:
                if i not in self.cities_visited:
                    self.cities_visited.add(i)
                    queue.append(i)

    def findCircleNum(self, isConnected: list[list[int]]) -> int:
        rows, cols = len(isConnected), len(isConnected[0])

        cities_graph = [[] for _ in range(rows)]

        for i in range(rows):
            for j in range(cols):
                if i != j and isConnected[i][j] == 1:
                    cities_graph[i].append(j)

        provinces = 0

        for city in range(rows):
            if city not in self.cities_visited:
                self.bfs(city, cities_graph)
                provinces += 1

        return provinces
