** 1351. Count Negative Numbers in a Sorted Matrix **

# Approach 1:
class Solution(object):
    def countNegatives(self, grid):
        def bin(row):
            start, end = 0, len(row)
            while start<end:
                mid = start +(end -start) // 2
                if row[mid]<0:
                    end = mid
                else:
                    start = mid+1
            return len(row)- start
        
        count = 0
        for row in grid:
            count += bin(row)
        return(count)
        
# Approach 2:
class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        r,c=len(grid),len(grid[0])
        count=0
        row,col=r-1,0
        while row >=0 and col<c:
            if grid[row][col]<0:
                count+=c-col
                row-=1
            else:
                col+=1
        return count

# Approach 3:
import numpy as np
class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        return np.sum(np.array(grid).flatten() < 0, axis = 0)
