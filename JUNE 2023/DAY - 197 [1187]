** 1187. Make Array Strictly Increasing **

# Approach 1:
class Solution:
    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        dp = {-1: 0}
        
        arr2.sort()
        for a in arr1:
            nextDp = collections.defaultdict(lambda: math.inf)
            for val, steps in dp.items():
                if a > val:
                    nextDp[a] = min(nextDp[a], steps)
                i = bisect_right(arr2, val)
                if i < len(arr2):
                    nextDp[arr2[i]] = min(nextDp[arr2[i]], steps + 1)
            if not nextDp:
                return -1
            dp = nextDp

        return min(dp.values())

# Approach 2:
class Solution:
    def makeArrayIncreasing(self, first: List[int], second: List[int]) -> int:
        @cache
        def dp(i: int, prev_max: int) -> int:
            if i == len(first):
                return 0

            j = bisect(second, prev_max)

            return min(
                dp(i + 1, first[i]) if first[i] > prev_max else maxsize,
                dp(i + 1, second[j]) + 1 if j < len(second) else maxsize,
            )

        second.sort()
        operations = dp(0, -maxsize)
        return operations if operations != maxsize else -1

# Approach 3:
class Solution:
    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        

        import bisect

        arr2 = sorted(set(arr2))
        n1, n2 = len(arr1), len(arr2)

        d = {0: arr1[0]}  # swap time: value of last
        if arr2[0] < arr1[0]:
            d[1] = arr2[0]
        
        for i in range(1, n1):
            new_d = {}
            x = arr1[i]
            for time, value in d.items():
                if value < x:
                    new_d[time] = x
            for time, value in d.items():
                index = bisect.bisect_right(arr2, value)  
                if index < n2:
                    if time + 1 in new_d:
                        new_d[time + 1] = min(new_d[time + 1], arr2[index])
                    else:
                        new_d[time + 1] = arr2[index]
            
            d = new_d
        if d:
            return min(d.keys())
        return -1
        
