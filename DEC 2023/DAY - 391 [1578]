** 1578. Minimum Time to Make Rope Colorful **

# Approach 1:
class Solution:
    def minCost(self, s: str, cost: List[int]) -> int:
        ans = prev = 0 # index of previously retained letter 
        for i in range(1, len(s)): 
            if s[prev] != s[i]: prev = i
            else: 
                ans += min(cost[prev], cost[i])
                if cost[prev] < cost[i]: prev = i
        return ans 

# Approach 2:
class Solution:
    def minCost(self, colors: str, neededTime: List[int]) -> int:
        n=len(colors)
        l=0
        removes=0
        for r in range(n):
            if (colors[r]!=colors[l]):
                sameColors=neededTime[l:r]
                removes+=sum(sameColors)-max(sameColors)
                l=r
        removes+=sum(neededTime[l:])-max(neededTime[l:])
        return removes
        
