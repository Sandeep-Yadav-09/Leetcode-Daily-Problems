** 2402. Meeting Rooms III **

# Approach 1:
class Solution:
    def mostBooked(self, n: int, m: List[List[int]]) -> int:
        r, c = [0]*n, [0]*n # rooms, counter
        for s, e in sorted(m):
            found = 0
            for i,f in enumerate(r):
                if f <= s:
                    r[i] = e
                    c[i] += 1
                    found = 1
                    break

            if not found:
                q = r.index(min(r))
                r[q] += e-s
                c[q] += 1

        return c.index(max(c))

# Approach 2:
class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        meetings.sort(key=lambda x: x[0])
        avail, cnt, busy = list(range(n)), [0]*n, []
        for s, e in meetings:
            while busy and busy[0][0] <= s:
                _, r = heappop(busy)
                heappush(avail, r)
            duration = e - s
            if avail:
                r = heappop(avail)
                start = s
            else:
                end, r = heappop(busy)
                start = end
            heappush(busy, (start + duration, r))
            cnt[r] += 1
        return max(range(n), key=lambda x: cnt[x])
