** 1751. Maximum Number of Events That Can Be Attended II **

# Approach 1:
import bisect

class Solution:

    def __init__(self):
        self.events = []

    @cache
    def solve(self, i, k):
        if i >= len(self.events): 
            return 0
        if k <= 0: 
            return 0
        
        s, e, v = self.events[i]
        
        j = bisect.bisect(self.events, [e+1])
        
        return max(v + self.solve(j, k - 1), self.solve(i + 1, k))

    def maxValue(self, events: List[List[int]], k: int) -> int:
        events.sort()  
        self.events = events
        return self.solve(0, k)

# Approach 2:
from functools import lru_cache
from bisect import bisect_right

class Solution:
    def maxValue(self, events: List[List[int]], k: int) -> int:
        events.sort()
        n = len(events)
        
        start_days = [e[0] for e in events]

        @lru_cache(None)
        def dp(i, remaining):
            if i == n or remaining == 0:
                return 0

            not_take = dp(i + 1, remaining)

            next_i = bisect_right(start_days, events[i][1])
            take = events[i][2] + dp(next_i, remaining - 1)

            return max(take, not_take)

        return dp(0, k)
