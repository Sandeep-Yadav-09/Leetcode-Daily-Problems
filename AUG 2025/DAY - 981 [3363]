** 3363. Find the Maximum Number of Fruits Collected **

# Approach 1:
class Solution:
    def maxCollectedFruits(self, fruits: List[List[int]]) -> int:
        n = len(fruits)
        diag = 0

        for i in range(n):
            diag += fruits[i][i]
        
        dp = [[-inf] * (n+1) for _ in range(n+1)] 
        dp[n-1][0] = fruits[n-1][0] 
        for col in range(1, n): 
            for row in range(col+1, n): 
                dp[row][col] = max(
                    dp[row+1][col-1] + fruits[row][col], 
                    dp[row][col-1] + fruits[row][col], 
                    dp[row-1][col-1] + fruits[row][col] 
                )
        
        dp[0][n-1] = fruits[0][n-1] 
        for row in range(1, n): 
            for col in range(row+1, n): 
                dp[row][col] = max(
                    dp[row-1][col-1] + fruits[row][col], 
                    dp[row-1][col] + fruits[row][col], 
                    dp[row-1][col+1] + fruits[row][col] 
                )
        
        return diag + dp[n-1][n-2] + dp[n-2][n-1] 

# Approach 2:
from typing import List

class Solution:
    def maxCollectedFruits(self, fruits: List[List[int]]) -> int:
        n = len(fruits)

        def recs(mat, i, j):
            if i < 0 or i >= n or j < 0 or j >= n:
                return float('-inf')
            if j < n // 2:
                return float('-inf')
            if i == n - 1 and j == n - 1:
                return mat[i][j]

            down = mat[i][j] + recs(mat, i + 1, j)
            left = mat[i][j] + recs(mat, i + 1, j - 1)
            right = mat[i][j] + recs(mat, i + 1, j + 1)
            return max(down, left, right)

        def rect(mat, i, j):
            if i < 0 or i >= n or j < 0 or j >= n:
                return float('-inf')
            if i < n // 2:
                return float('-inf')
            if i == n - 1 and j == n - 1:
                return mat[i][j]

            down = mat[i][j] + rect(mat, i + 1, j + 1)
            left = mat[i][j] + rect(mat, i - 1, j + 1)
            right = mat[i][j] + rect(mat, i, j + 1)
            return max(down, left, right)

        x = 0
        for i in range(n):
            x += fruits[i][i]
            fruits[i][i] = 0

        y = recs(fruits, 0, n - 1)
        z = rect(fruits, n - 1, 0)
        return x + y + z
