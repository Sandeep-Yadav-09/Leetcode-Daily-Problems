** 3197. Find the Minimum Area to Cover All Ones II **

# Approach 1:
class Solution:
    def minimumSum(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])

        def area(a, b, c, d): 
            lx, rx, ty, dy = cols, 0, rows, 0
            for i in range(a, b + 1):
                for j in range(c, d + 1):
                    if grid[i][j]:
                        lx = min(lx, j)
                        rx = max(rx, j)
                        ty = min(ty, i)
                        dy = max(dy, i)
            return (rx - lx + 1) * (dy - ty + 1)

        ans = int(10**9)

        for i in range(rows):
            for j in range(cols):
                ans = min(ans,
                          area(0, i, 0, cols-1) + area(i+1, rows-1, 0, j) + area(i+1, rows-1, j+1, cols-1),
                          area(0, i, 0, j) + area(0, i, j+1, cols-1) + area(i+1, rows-1, 0, cols-1),
                          area(0, rows-1, 0, j) + area(0, i, j+1, cols-1) + area(i+1, rows-1, j+1, cols-1),
                          area(0, rows-1, j+1, cols-1) + area(0, i, 0, j) + area(i+1, rows-1, 0, j)
                          )

        for i in range(rows):
            for j in range(i, rows):
                ans = min(ans,
                          area(0, i, 0, cols-1) + area(i+1, j, 0, cols-1) + area(j+1, rows-1, 0, cols-1))

        for i in range(cols):
            for j in range(i, cols):
                ans = min(ans, 
                           area(0, rows-1, 0, i) + area(0, rows-1, i+1, j) + area(0, rows-1, j+1, cols-1))

        return ans

# Approach 2:
class Solution: 

    def minimumSum(self, grid: List[List[int]]) -> int:
        @cache
        def helper(a,b,c,d):
            mii,mij = float('inf'),float('inf')
            mai,maj = -float('inf'),-float('inf')
            for i in range(a,b+1):
                for j in range(c,d+1):
                    if grid[i][j] == 1:
                        mii,mij = min(mii,i),min(mij,j)
                        mai,maj = max(mai,i),max(maj,j)
            return (mai-mii+1)*(maj-mij+1)
        m = len(grid)
        n = len(grid[0])
        res = 99999
        for i in range(m-1):
            for j in range(i+1,m-1):
                res = min(helper(0,i,0,n-1)+helper(i+1,j,0,n-1)+helper(j+1,m-1,0,n-1),res)
        for i in range(n-1):
            for j in range(i+1,n-1):
                res = min(helper(0,m-1,0,i)+helper(0,m-1,i+1,j)+helper(0,m-1,j+1,n-1),res)
        
        for i in range(m-1):
            for j in range(n-1):
                res = min(helper(0,i,0,n-1)+helper(i+1,m-1,0,j)+helper(i+1,m-1,j+1,n-1),res)
                res = min(helper(0,m-1,0,j)+helper(0,i,j+1,n-1)+helper(i+1,m-1,j+1,n-1),res)
                res = min(helper(0,i,0,j)+helper(0,i,j+1,n-1)+helper(i+1,m-1,0,n-1),res)
                res = min(helper(0,i,0,j)+helper(i+1,m-1,0,j)+helper(0,m-1,j+1,n-1),res)               
        return res
