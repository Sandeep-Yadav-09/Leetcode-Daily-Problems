** 1504. Count Submatrices With All Ones **

# Approach 1:
class Solution:
    def numSubmat(self, mat: List[List[int]]) -> int:
        r, c=len(mat), len(mat[0])
        ans=0
        for i, h in enumerate(mat):
            st=[]
            cnt=[0]*c
            for j in range(c):
                if i>0 and h[j]>0:
                    h[j]+=mat[i-1][j]
                while st and h[st[-1]]>h[j]:
                    st.pop()
                left=st[-1] if st else -1
                cnt[j]=h[j]*(j-left)
                if st: cnt[j]+=cnt[left]
                ans+=cnt[j]
                st.append(j)
        return ans

# Approach 2:
class Solution:
    def numSubmat(self, mat: List[List[int]]) -> int:
        rows, cols = len(mat), len(mat[0])
        h = [0] * cols
        res = 0
        for i in range(rows):
            for j in range(cols):
                h[j] = h[j] + 1 if mat[i][j] else 0
            for j in range(cols):
                min_height, l = h[j], j
                while 0 <= l and min_height:
                    min_height = min(min_height, h[l])
                    res += min_height
                    l -= 1
        return res
