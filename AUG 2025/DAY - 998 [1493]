** 1493. Longest Subarray of 1's After Deleting One Element **

# Approach 1:
class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        dp = []
        count = 0

        for num in nums:
            if num == 1:
                count += 1
            else:
                dp.append(count)
                count = 0
        dp.append(count)

        if len(dp) == 1:
            return dp[0] - 1

        max_len = 0
        for i in range(len(dp) - 1):
            max_len = max(max_len, dp[i] + dp[i + 1])

        return max_len

# Approach 2:
class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        cz,co,l,r,m = 0,0,0,0,0
        for i in range(len(nums)):
              
            if nums[i]==0:
                cz+=1
            if cz>1:
                break
            r+=1
            m=max(m,r-l)
        while r<len(nums)-1:
            if nums[r+1]==0:
                cz+=1
            if cz>1:
                while cz>1:
                    if nums[l]==0:
                        cz-=1
                    l+=1
                r+=1
            else:
                r+=1
            m=max(m,r-l+1)
        return m-1
