** 118. Pascal's Triangle **

# Approach 1:
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        if numRows == 0:
            return []
        if numRows == 1:
            return [[1]]
        
        prevRows = self.generate(numRows - 1)
        newRow = [1] * numRows
        
        for i in range(1, numRows - 1):
            newRow[i] = prevRows[-1][i - 1] + prevRows[-1][i]
        
        prevRows.append(newRow)
        return prevRows

# Approach 2:
from typing import List

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        if numRows == 0:
            return []

        triangle = [[1]]

        for i in range(numRows - 1):
            prev_row = triangle[-1]
            
            new_row = [1]
            
            for j in range(len(prev_row) - 1):
                new_row.append(prev_row[j] + prev_row[j+1])
            
            new_row.append(1)
            
            triangle.append(new_row)
            
        return triangle
