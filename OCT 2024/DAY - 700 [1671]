** 1671. Minimum Number of Removals to Make Mountain Array **

# Approach 1:

class Solution:
    def minimumMountainRemovals(self, nums: List[int]) -> int:
        n = len(nums)
        increasing = [1] * n
        for i in range(n):
            for j in range(i):
                if nums[j] < nums[i]:
                    increasing[i] = max(increasing[i], increasing[j] + 1)
        decreasing = [1] * n
        for i in range(n-1, -1, -1):
            for j in range(i+1, n):
                if nums[j] < nums[i]:
                    decreasing[i] = max(decreasing[i], decreasing[j] + 1)
        max_mountain = 0
        for i in range(n):
            if increasing[i] > 1 and decreasing[i] > 1:
                max_mountain = max(max_mountain, increasing[i] + decreasing[i] - 1)
        return n - max_mountain

# Approach 2:
class Solution:
    def minimumMountainRemovals(self, nums: List[int]) -> int:
        size = len(nums)

        left = [0] * size
        right = [0] * size
        
        dp = []  
        for i in range(size):
            idx = bisect_left(dp, nums[i])
            if idx == len(dp):
                dp.append(nums[i])
            else:
                dp[idx] = nums[i]
            left[i] = len(dp)
        
        dp = []  
        for i in range(size - 1, -1, -1):
            idx = bisect_left(dp, nums[i])
            if idx == len(dp):
                dp.append(nums[i])
            else:
                dp[idx] = nums[i]
            right[i] = len(dp)

        minRemove = size
        for i in range(size):
            if left[i] > 1 and right[i] > 1:
                minRemove = min(minRemove, size - left[i] - right[i] + 1)
        
        return minRemove
