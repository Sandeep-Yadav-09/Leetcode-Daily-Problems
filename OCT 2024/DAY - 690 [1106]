** 1106. Parsing A Boolean Expression **

# Approach 1:
class Solution:
    @cache
    def parseBoolExpr(self, expression: str) -> bool:
        if expression[0] == '&':
            return all(map(self.parseBoolExpr, self.split(expression[2:-1])))
        if expression[0] == '|':
            return any(map(self.parseBoolExpr, self.split(expression[2:-1])))
        if expression[0] == '!':
            return not self.parseBoolExpr(expression[2:-1])
        if expression == 'f':
            return False
        if expression == 't':
            return True
    
    def split(self, expression: str) -> List[str]:
        opened = 0
        prev = 0
        res = []
        for i in range(len(expression)):
            if expression[i] == '(':
                opened += 1
            elif expression[i] == ')':
                opened -= 1
            
            if expression[i] == ',' and not opened:
                res.append(expression[prev:i])
                prev = i+1
        res.append(expression[prev:i+1])
        return res

# Approach 2:
class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        stack = []
        for i in expression:
            if i == ',':
                continue
            elif i in 'tf!&|':
                stack.append(i)
            elif i == '(':
                stack.append(i)
            elif i == ')':
                values = []
                while stack[-1] != '(':
                    values.append(stack.pop())
                stack.pop()  
                sign = stack.pop()  
                if sign == '&':
                    if values.count('f') > 0:
                        result = False
                    else:
                        result = True
                elif sign == '|':
                    if values.count('t') > 0:
                        result = True
                    else:
                        result = False
                elif sign == '!':
                    if values[0] == 'f':
                        result = True
                    else:
                        result = False
                if result == True:
                    stack.append('t')
                else:
                    stack.append('f')
        return stack[-1] == 't'
