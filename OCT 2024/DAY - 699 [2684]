** 2684. Maximum Number of Moves in a Grid **

# Approach 1:
class Solution:
    def maxMoves(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        
        def dfs(row, col):
            if (row, col) in memo:
                return memo[(row, col)]
            moves = 0
            for r, c in [(row - 1, col + 1), (row, col + 1), (row + 1, col + 1)]:
                if 0 <= r < rows and 0 <= c < cols and grid[r][c] > grid[row][col]:
                    moves = max(moves, 1 + dfs(r, c))
            memo[(row, col)] = moves
            return moves
        
        memo = {}
        max_moves = 0
        for row in range(rows):
            max_moves = max(max_moves, dfs(row, 0))
        
        return max_moves

# Approach 2:
class Solution:
    def maxMoves(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        @cache
        def dp(i: int, j: int) -> int:
            if i < 0 or i >= m or j < 0 or j >= n: return 0
            res = 0 
            cur = grid[i][j]
            for x, y in [(-1, 1), (0, 1), (1, 1)]:
                if 0 <= i + x < m and 0 <= j + y < n and grid[i + x][j + y] > cur:
                    res = max(res, dp(i + x, j + y) + 1)
            return res
        ans = 0
        for i in range(m):
            ans = max(ans, dp(i, 0))
        return ans
