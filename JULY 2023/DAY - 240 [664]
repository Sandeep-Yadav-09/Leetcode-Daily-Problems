** 664. Strange Printer **

# Approach 1:
class Solution:
    def strangePrinter(self, s: str) -> int:
        N = len(s)
        @cache
        def calc(left, right): 
            if left >= right: 
                return 0
            best = calc(left + 1, right) + 1
            for index in range(left + 1, right + 1): 
                if s[left] == s[index]: 
                    best = min(best, calc(left, index - 1) + calc(index, right))
            return best
        return calc(0, N - 1) + 1

# Approach 2:
class Solution:
    def strangePrinter(self, s: str) -> int:
        s = "".join(ch for i, ch in enumerate(s) if i == 0 or s[i-1] != ch)
        
        @cache
        def fn(lo, hi): 
            """Return min ops to print s[lo:hi]."""
            if lo == hi: return 0
            ans = 1 + fn(lo+1, hi)
            for mid in range(lo+1, hi): 
                if s[lo] == s[mid]: 
                    ans = min(ans, fn(lo, mid) + fn(mid+1, hi))
            return ans 
        
        return fn(0, len(s))

# Approach 3:
class Solution:
    def strangePrinter(self, s: str) -> int:
        n = len(s)
        dp = [[float('inf')] * n for _ in range(n)]
        
        def helper(s, low, high):
            if low > high:
                return 0
            if dp[low][high] != float('inf'):
                return dp[low][high]
            
            dp[low][high] = 1 + helper(s, low + 1, high)
            for mid in range(low + 1, high + 1):
                if s[low] == s[mid]:
                    dp[low][high] = min(dp[low][high], (helper(s, low, mid-1) + helper(s, mid+1, high)))
            return dp[low][high]
        
        res = helper(s, 0, n-1)
        return res
