** 1751. Maximum Number of Events That Can Be Attended II **

# Approach 1:
class Solution:
    def dp(self,i,events,k,timeBooked,dct):
        if i<0 or k==0:
            return 0
        x=0
        if (i,k,timeBooked) in dct:
            return dct[(i,k,timeBooked)]
        if events[i][1]<timeBooked:
            x=self.dp(i-1,events,k-1,events[i][0],dct)+events[i][2]
        y=self.dp(i-1,events,k,timeBooked,dct)
        dct[(i,k,timeBooked)]=max(x,y)
        return max(x,y)
        
    def maxValue(self, events: List[List[int]], k: int) -> int:
        n=len(events)
        dct={}
        events.sort(key=lambda x:x[1])
        return self.dp(n-1,events,k,float("infinity"),dct)

# Approach 2:
import bisect
from functools import lru_cache

class Solution:
    def maxValue(self, events: List[List[int]], k: int) -> int:
        if k == 1: # optimization for TLE test case 57/67
            return max([event[2] for event in events])
        
        events.sort()
        event_starts = [event[0] for event in events] # enables binary search
        
        @lru_cache(None)
        def dp(i, j):
            if j == 0: # out of turns
                return 0
            if i >= len(events): # end of events array
                return 0
            max_score = events[i][2]
            
            # get minimum index where start day is greater than current end day
            next_index_minimum = bisect.bisect_left(event_starts, events[i][1] + 1)
            
            # check each possibility from the minimum next index until end of the array
            for k in range(next_index_minimum, len(events)):
                max_score = max(max_score, events[i][2] + dp(k, j - 1))
            
            # check if we can get a better score if we skip this index altogether
            max_score = max(max_score, dp(i + 1, j))
            return max_score
        return dp(0, k)

# Approach 3:
from functools import lru_cache

class Solution:
    def maxValue(self, events: List[List[int]], k: int) -> int:
        events.sort(key=lambda x: (x[0], x[1]))
        
        @lru_cache(None)
        def dp(idx, max_end, k):
            if idx < 0 or k == 0:
                return 0
            if events[idx][1] <= max_end:
                return max(
                    dp(idx-1, max_end, k),
                    dp(idx-1, events[idx][0] - 1, k-1) + events[idx][2]
                )
            else:
                return dp(idx-1, max_end, k)
       
        return dp(len(events) - 1, float('inf'), k)
