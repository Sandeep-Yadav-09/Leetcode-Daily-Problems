** 808. Soup Servings **

# Approach 1:
class Solution:
    def soupServings(self, n: int) -> float:
        @cache
        def dfs(a,b):
            if a<=0 and b <=0:
                return 0.5
            elif a<=0:
                return 1
            elif b<=0:
                return 0
            else:
                return 0.25 * (dfs(a-100,b)+dfs(a-75,b-25)+dfs(a-50,b-50)+dfs(a-25,b-75))
        return 1 if n > 4450 else dfs(n,n) 

# Approach 2:
class Solution:
    def soupServings(self, N: int) -> float:
        if N > 5000: return 1
        
        @lru_cache(None)
        def fn(x, y): 
            if x <= 0 and y <= 0: return 0.5
            if x <= 0 or y <= 0: return x <= 0
            return 0.25*(fn(x-100, y) + fn(x-75, y-25) + fn(x-50, y-50) + fn(x-25, y-75))
        
        return fn(N, N)

# Approach 3:
class Solution:
    def soupServings(self, n: int) -> float:
        if n >= 4300:
            return 1.0
        memo = {}

        def serve(A, B):
            if (A, B) in memo:
                return memo[(A, B)]
            
            if A <= 0 and B <= 0:
                return 0.5
            if A <= 0:
                return 1.0
            if B <= 0:
                return 0.0
            
            prob = 0.25 * (serve(A - 100, B) + serve(A - 75, B - 25) + serve(A - 50, B - 50) + serve(A - 25, B - 75))
            memo[(A, B)] = prob
            return prob

        return serve(n, n)
