** 111. Minimum Depth of Binary Tree **

# Appraoch 1:
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        if root==None:
            return 0
        else:
            if root.left==None:
                return self.minDepth(root.right)+1
            elif root.right==None:
                return self.minDepth(root.left)+1
            else:
                return min(self.minDepth(root.left),self.minDepth(root.right))+1

# Approach 2:
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        
        left = self.minDepth(root.left)
        right = self.minDepth(root.right)

        if root.left and root.right:
            return min(left, right) + 1
        
        return max(left, right) + 1

# Approach 3:
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:

        if not root:
            return 0
            
        def dfs(root, depth):
            if not root: return float('inf')
            if not root.left and not root.right: return depth + 1
            else: return min(dfs(root.left,depth+1), dfs(root.right,depth+1))    

        return dfs(root,0)
