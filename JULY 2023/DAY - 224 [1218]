** 1218. Longest Arithmetic Subsequence of Given Difference **

# Approach 1:
class Solution:
    def longestSubsequence(self, arr: List[int], difference: int) -> int:
        dp = {}
        for x in arr:
            if x - difference in dp:
                dp[x] = dp[x-difference] + 1
            else:
                dp[x] = 1
            
        return max(dp.values())

# Approach 2:
class Solution:
    def longestSubsequence(self, arr: List[int], d: int) -> int:
        dp = collections.Counter()
        for a in arr:
            dp[a] = max(dp[a], dp[a - d] + 1)
        return max(dp.values())

# Approach 3:
from collections import defaultdict

class Solution:
    def longestSubsequence(self, arr: List[int], dif: int) -> int:
        # Create a defaultdict to store the lengths of subsequences
        lengths = defaultdict(lambda: 0)
        
        # Iterate over the array elements
        for num in arr:
            # Calculate the length of the subsequence ending at the current element
            lengths[num] = lengths[num - dif] + 1

        # Return the maximum length of subsequences
        return max(lengths.values())
