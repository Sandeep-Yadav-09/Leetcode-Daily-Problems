** 146. LRU Cache **

# Approach 1:
class LRUCache:
    def __init__(self, capacity):
        self.dict = {}
        self.freeSpace = capacity

    def get(self, key):
        if key not in self.dict:
            return -1

        self.dict[key] = self.dict.pop(key)

        return self.dict[key]

    def put(self, key, value):
        if key in self.dict:
            self.dict.pop(key)
        else:
            if self.freeSpace:
                self.freeSpace -= 1
            else:
                self.dict.pop(next(iter(self.dict)))

        self.dict[key] = value

# Approach 2:
from collections import OrderedDict

class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = OrderedDict()

    def get(self, key: int) -> int:
        if key in self.cache:
            self.cache.move_to_end(key)
            return self.cache[key]
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache.move_to_end(key)
        elif len(self.cache) == self.capacity:
            self.cache.popitem(last=False)
        self.cache[key] = value

# Approach 3:
class LRUCache:

    def __init__(self, capacity: int): 
        self.return1={}
        self.capacity=capacity

    def get(self, key: int) -> int:
        if key in self.return1:
            get = self.return1[key]
            del self.return1[key]
            self.return1[key]=get
            return get
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.return1:
            del self.return1[key]
            self.return1[key]=value
        else:
            if len(self.return1)<self.capacity:
                self.return1[key]=value
            else:
                del self.return1[next(iter(self.return1))] ###This Guy Here is super important, Learn what this is in python
                self.return1[key]=value
