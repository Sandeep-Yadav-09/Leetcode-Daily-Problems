** 894. All Possible Full Binary Trees **

# Approach 1:
class Solution:
    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:
        if n % 2 == 0:
            return []

        memo = {}

        def _allPossibleFBT(n):
            if n in memo:
                return memo[n]

            list = []
            if n == 1:
                list.append(TreeNode(0))
            else:
                for i in range(1, n - 1, 2):
                    lTrees = _allPossibleFBT(i)
                    rTrees = _allPossibleFBT(n - i - 1)

                    for lt in lTrees:
                        for rt in rTrees:
                            list.append(TreeNode(0, lt, rt))

            memo[n] = list
            return list

        return _allPossibleFBT(n)

# Approach 2:
class Solution:
    def allPossibleFBT(self, N: int) -> List[TreeNode]:
        if N % 2 == 0:
            return []
        trees_all = collections.defaultdict(list)
		
        trees_all[1] = [TreeNode(0)]
        for n in range(3, N+1, 2):
            for k in range(1, n, 2):
                for tree1, tree2 in itertools.product(trees_all[k],trees_all[n-k-1]):
                    tree = TreeNode(0)
                    tree.left = tree1
                    tree.right = tree2
                    trees_all[n].append(tree)
                    
        return trees_all[N]

# Approach 3:
class Solution:
    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:
        trees = defaultdict(list)
        trees[1].append(TreeNode(0))
        
        for lvl in range(3, n + 1, 2):
            for left in range(1, lvl, 2):
                for left_subtree in d[left]:
                    for right_subtree in d[lvl - left - 1]:
                        trees[lvl].append(
                            TreeNode(0, left_subtree, right_subtree))
                           
        return trees[n]
