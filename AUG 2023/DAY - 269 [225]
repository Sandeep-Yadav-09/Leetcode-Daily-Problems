** 225. Implement Stack using Queues **

# Approach 1:
class MyStack:

    def __init__(self):
        self.q = deque()

    def push(self, x: int) -> None:
        self.q.append(x)
        for _ in range(len(self.q) - 1):
            self.q.append(self.q.popleft())

    def pop(self) -> int:
        return self.q.popleft()

    def top(self) -> int:
        return self.q[0]

    def empty(self) -> bool:
        return len(self.q) == 0

# Approach 2:
from collections import deque

class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue = deque()
        

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        tmp = deque([x])
        tmp.extend(self.queue)
        self.queue = tmp
        

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        return self.queue.popleft()
        

    def top(self) -> int:
        """
        Get the top element.
        """
        return self.queue[0]
        

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return len(self.queue) == 0

# Approach 3:
import queue
class MyStack:
    def __init__(self):
        self.q_primary = queue.Queue()
        self.q_helper = queue.Queue()

    def push(self, x: int) -> None:
        self.q_primary.put(x)
    def pop(self) -> int:
        while self.q_primary.qsize() != 1:
            self.q_helper.put(self.q_primary.get())
        top = self.q_primary.get()
        while not self.q_helper.empty():
            self.q_primary.put(self.q_helper.get())
        return top
    def top(self) -> int:
        while self.q_primary.qsize() != 1:
            self.q_helper.put(self.q_primary.get())
        top = self.q_primary.get()
        while not self.q_helper.empty():
            self.q_primary.put(self.q_helper.get())
        self.q_primary.put(top)
        return top
    def empty(self) -> bool:
        return self.q_primary.qsize() == 0
