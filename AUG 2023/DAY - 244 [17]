** 17. Letter Combinations of a Phone Number **

# Approach 1:
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        
        phone = {"2": "abc", "3": "def", "4": "ghi", "5": "jkl", "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
        res = []
        
        def backtrack(combination, next_digits):
            if not next_digits:
                res.append(combination)
                return
            
            for letter in phone[next_digits[0]]:
                backtrack(combination + letter, next_digits[1:])
        
        backtrack("", digits)
        return res

# Approach 2:
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        return list(map(''.join, product(*({'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}[digit] for digit in digits)))) if digits else []
# Approach 3:
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        ddict = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl',
                 '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}
        if len(digits) == 0:
            oldlist = []
        else:
            oldlist = ['']
            for d in digits:
                newlist = []
                for ss in ddict[d]:
                    newlist.extend([s + ss for s in oldlist])
                oldlist = newlist
        return oldlist
