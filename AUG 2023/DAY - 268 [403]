** 403. Frog Jump **

# Approach 1:
class Solution:
    def canCross(self, stones: List[int]) -> bool:
        n = len(stones)
        stoneSet = set(stones)
        visited = set()
        def goFurther(value,units):
            if (value+units not in stoneSet) or ((value,units) in visited):
                return False
            if value+units == stones[n-1]:
                return True
            visited.add((value,units))
            return goFurther(value+units,units) or goFurther(value+units,units-1) or goFurther(value+units,units+1)
        return goFurther(stones[0],1)

# Approach 2:
class Solution:
    def canCross(self, stones: List[int]) -> bool:
        dp = [set() for _ in range(len(stones))]
        
        # 1st step only 1 move possible of value 1
        dp[0].add(1)
        
        for i in range(1,len(stones)):
            # check all the previous stones from where the jumps are possible
            for j in range(i):
                # store the move value required from jth to ith stone
                diff = stones[i]-stones[j]
                # check if that move value is present in jth stone
                if diff in dp[j]:
                    # If possible, then add possibilities of move values in the ith stone set
                    dp[i].add(diff-1)
                    dp[i].add(diff)
                    dp[i].add(diff+1)
        # If the len of last stone's set is zero, it means no jumps to this stone possible
        return True if len(dp[-1])>0 else False

# Approach 3:
class Solution:
    def canCross(self, stones: List[int]) -> bool:
        n = stones[-1]
        hm = {}
        for i in range(len(stones)):
            hm[stones[i]] = i
        dp = {}
        def helper(i,k):
            if i not in hm:
                return False
            if i==n:
                return True
            if (i,k) in dp:
                return dp[(i,k)]
            for j in [k-1,k,k+1]:
                if i+j>i and helper(i+j,j):
                    dp[(i,k)] = True
                    return True
            dp[(i,k)] = False
            return False
        if stones[1]==1:
            return helper(1,1)
        else:
            return False
