** 1615. Maximal Network Rank **

# Approach 1:
class Solution:
    def maximalNetworkRank(self, n: int, roads) -> int:
        max_rank = 0
        connections = {i: set() for i in range(n)}
        for i, j in roads:
            connections[i].add(j)
            connections[j].add(i)
        for i in range(n - 1):
            for j in range(i + 1, n):
                max_rank = max(max_rank, len(connections[i]) +
                               len(connections[j]) - (j in connections[i]))
        return max_rank

# Approach 2:
class Solution:
    def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:
        graph = {}
        for u, v in roads:
            graph.setdefault(u, set()).add(v)
            graph.setdefault(v, set()).add(u)
        
        ans = 0
        for i in range(n): 
            for j in range(i+1, n):
                val = len(graph.get(i, set())) + len(graph.get(j, set())) - (j in graph.get(i, set()))
                ans = max(ans, val)
        return ans 

# Approach 3:
class Solution:    
    def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:    
        d, c, res = Counter(), Counter(), 0
        for i in roads:
            d[i[0]] += 1
            d[i[1]] += 1
            c[(i[0], i[1])] = True
        
        for i in range(0, n):
            for j in range(i+1, n):
                if c[(i,j)] or c[(j,i)]: curr = d[i] + d[j] - 1
                else: curr = d[i] + d[j]
                res = max(res, curr)              
        return res
