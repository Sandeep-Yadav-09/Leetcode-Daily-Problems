** 542. 01 Matrix **

# Approach 1:
class Solution:
	def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
		Row, Col = len(mat), len(mat[0])
		queue = []
		directions = [[0, +1], [0, -1], [1, 0], [-1, 0]]

		for i in range(Row):
			for j in range(Col):
				if mat[i][j] == 0:
					queue.append((i, j)) 
				else:
					mat[i][j] = "*"

		for r, c in queue:
			for dr, dc in directions:
				row = r + dr
				col = c + dc
				if 0 <= row < Row and 0 <= col < Col and mat[row][col] == "*":
					mat[row][col] = mat[r][c] + 1
					queue.append((row, col))
		return mat
      
# Approach 2:
class Solution:	
	def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
			rows = len(matrix)
			if rows == 0:
					return []
			
			cols = len(matrix[0])
			mx = rows*cols
			dis = [[mx for _ in range(cols)] for _ in range(rows)]
			
			for i in range(rows-1, -1, -1):
					for j in range(cols-1, -1, -1):
							if matrix[i][j] == 0:
									dis[i][j] = 0
							else:
									right = dis[i][j+1] if j+1 < cols else mx
									down =  dis[i+1][j] if i+1 < rows else mx
									dis[i][j] = 1 + min(right, down)
			
			for i in range(rows):
					for j in range(cols):
							if matrix[i][j] == 0:
									dis[i][j] = 0
							else:
									left = dis[i][j-1] if j-1 >= 0 else mx 
									top =  dis[i-1][j] if i-1 >= 0  else mx 
									dis[i][j] = min(dis[i][j], 1 + min(left, top)) # pay attention here
			
			return dis
      
# Approach 3:
      class Solution:	
	def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
			rows = len(matrix)
			if rows == 0:
					return []
			
			cols = len(matrix[0])
			
			dis = [[float('inf') for _ in range(cols)] for _ in range(rows)]
			
			q = []
			for i in range(rows):
					for j in range(cols):
							if matrix[i][j] == 0:
									dis[i][j] = 0
									q.append((i, j))
			
			while len(q) > 0:
					x, y = q.pop(0)
					for (a, b) in ((x-1, y), (x+1, y), (x, y-1), (x, y+1)):
							if 0 <= a < rows and 0 <= b < cols and dis[a][b] > dis[x][y] + 1:
									dis[a][b] = dis[x][y] + 1
									q.append((a, b))
			
			return dis
