** 68. Text Justification **

# Approach 1:
class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        res, cur, num_of_letters = [], [], 0
        for w in words:
            if num_of_letters + len(w) + len(cur) > maxWidth:
                for i in range(maxWidth - num_of_letters):
                    cur[i%(len(cur)-1 or 1)] += ' '
                res.append(''.join(cur))
                cur, num_of_letters = [], 0
            cur += [w]
            num_of_letters += len(w)
        return res + [' '.join(cur).ljust(maxWidth)]

# Approach 2:
class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        def justify(part, totalLen):
        
            if len(part) == 1:
                return justifyLeft(part, totalLen)
            
            tatalSpaces = maxWidth - totalLen
            minSpaces = tatalSpaces // (len(part) - 1)
            extraSpaces = tatalSpaces % (len(part) - 1)
            
            spaces = [''] * len(words)
            for i in range(1, len(words)):
                space = ' ' * minSpaces
                if extraSpaces > 0:
                    space += ' '
                    extraSpaces -= 1
                spaces[i] = space

            return "".join(map(lambda x: x[0] + x[1], zip(spaces, part)))
        
        def justifyLeft(part, totalLen):
            extraSpaces = len(part) - 1 if len(part) >= 2 else 0             
            return " ".join(part) + ' ' * (maxWidth - totalLen - extraSpaces)
        
        result = []
        
        currentLen = 0
        current = []
        
        for word in words:
            spaces = len(current)
            
            if currentLen + len(word) + spaces > maxWidth:
                row = justify(current, currentLen)                    
                result.append(row)

                currentLen = 0                
                current = []
                
            current.append(word)
            currentLen += len(word)

        row = justifyLeft(current, currentLen)                    
        result.append(row)
            
        return result

# Approach 3:
class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        count, cur_words = 0, []
        res = []
        for word in words:
            if count+ len(word) + len(cur_words) > maxWidth:
                spaces = maxWidth - count
                for i in range(spaces):
                    cur_words[i % (len(cur_words)-1 if len(cur_words)>1 else 1)] += ' '
                res.append("".join(cur_words))
                count, cur_words = 0, []
            count+=len(word)
            cur_words.append(word)
        
		# last row
        spaces = maxWidth - count - (len(cur_words)-1)
        res.append(" ".join(cur_words)+" "*spaces)
        return res
