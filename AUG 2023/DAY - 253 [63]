** 63. Unique Paths II **

# Approach 1:
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:              
        m, n = len(obstacleGrid), len(obstacleGrid[0])        
        
        dp=[[0] * (n+1) for _ in range(m+1)]        
        dp[0][1]=1
                        
        for row in range(1, m+1):
            for col in range(1, n+1):
                if not obstacleGrid[row-1][col-1]:
                    dp[row][col] = dp[row-1][col] + dp[row][col-1]
         
        return dp[-1][-1]

# Approach 2:
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m,n=len(obstacleGrid),len(obstacleGrid[0])
        def countPath(i,j):
            if i>=m or j>=n or obstacleGrid[i][j]==1:
                dp[i][j]=0
            if i==m-1 and j==n-1:
                if obstacleGrid[i][j]==1:
                    return 0
                dp[i][j]=1
            if dp[i][j]!=-1:
                return dp[i][j]
            dp[i][j] = countPath(i+1,j) + countPath(i,j+1)
            return dp[i][j]
        dp=[[-1 for i in range(n+1)] for j in range(m+1)]
        return countPath(0,0)

# Approach 3:
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        #having buffer tiles before the actual grid
        m = len(obstacleGrid) + 1
        n = len(obstacleGrid[0]) + 1

        dp = [[0]*n for i in range(m)]

        #a trick to ensure that our starting tile is 1 and everything in the first row and column are also 1 if there is not an obstacle
        dp[0][1] = 1
        
        for i in range(1, m): #start at 1 because 0 are simply buffer tiles
            for j in range(1, n):
                dp[i][j] = 0 if obstacleGrid[i - 1][j - 1] == 1 else dp[i - 1][j] + dp[i][j - 1]                

        return dp[m - 1][n - 1]      
