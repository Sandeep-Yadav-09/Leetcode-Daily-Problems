** 2466. Count Ways To Build Good Strings **

# Approach 1:
class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        MOD = 10**9 + 7

        dp = [0] * (high + 1)

        dp[0] = 1

        for length in range(1, high + 1):
            if length >= zero:
                dp[length] = (dp[length] + dp[length - zero]) % MOD

            if length >= one:
                dp[length] = (dp[length] + dp[length - one]) % MOD

        return sum(dp[low:high + 1]) % MOD

# Approach 2:
class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        cache = {}
        def backtrack(s):
            if s > high:
                return 0
            if s in cache:
                return cache[s]
            count = 0
            if s >= low and s <=high:
                count = 1
            cache[s] = count+ backtrack(s+zero) + backtrack(s+one)
            cache[s] = cache[s]%1000000007
            return cache[s]
        return backtrack(0)
