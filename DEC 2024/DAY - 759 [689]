** 689. Maximum Sum of 3 Non-Overlapping Subarrays **

# Approach 1:
class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        sm1 = sm2 = sm3 = 0
        
        acc = list(accumulate(nums, initial = 0))

        for i, (a0,a1,a2,a3) in enumerate(zip(acc, acc[k:], acc[2*k:], acc[3*k:])):
            if a1 - a0 > sm1:
                sm1, idx1 = a1 - a0, i

            if a2 - a1 > sm2 - sm1:
                sm2, idx2 = sm1 + a2 - a1, (idx1, i+k)

            if a3 - a2 > sm3 - sm2:
                sm3, idx3 = sm2 + a3 - a2, (*idx2, i+2*k)

        return idx3

# Approach 2:
class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        arr=[]
        for i in range(len(nums)):
            if(i):nums[i]+=nums[i-1]
            if(k-1==i):arr.append(nums[i])
            elif(k<=i):arr.append(nums[i]-nums[i-k])
            
        dp=[[0 for i in range(3)]for j in range(len(arr))]
        for i in range(len(arr)):
            if(i==0):dp[i][0]=arr[i]
            elif(i):dp[i][0]=max(dp[i-1][0],arr[i])
            if(i>=k):dp[i][1]=max(dp[i-1][1],arr[i]+dp[i-k][0])
            if(i>=(2*k)):dp[i][2]=max(dp[i-1][2],arr[i]+dp[i-k][1])

        cnt=0
        i=len(arr)-2
        j=2
        ans=[]
        while(i>=0 and cnt<3):
            if(dp[i+1][j]!=dp[i][j]):
                ans.append(i+1)
                j-=1
                i-=k
                cnt+=1
            else:i-=1
        if(cnt<3):ans.append(0)
        ans=ans[::-1]
        return ans
