** 983. Minimum Cost For Tickets **

# Approach 1:
class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        dp = [0] * 366
        travelDays = set(days)
        
        for day in range(1, 366):
            if day not in travelDays:
                dp[day] = dp[day - 1]
            else:
                dp[day] = min(dp[day - 1] + costs[0],
                              dp[max(0, day - 7)] + costs[1],
                              dp[max(0, day - 30)] + costs[2])
        
        return dp[365]

# Approach 2:
class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        n = len(days)
        dp = [0] * (n + 1)
        for i in range(n):
            j = bisect_right(days, days[i] - 7)
            k = bisect_right(days, days[i] - 30)
            dp[i + 1] = min(
                dp[i] + costs[0],
                dp[j] + costs[1],
                dp[k] + costs[2]
            )
        return dp[-1]
