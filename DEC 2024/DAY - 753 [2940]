** 2940. Find Building Where Alice and Bob Can Meet **

# Approach 1:
class Solution:
    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:
        n, q = len(heights), len(queries)
        result = [-1] * q
        deferred = [[] for _ in range(n)]
        pq = []
        for i in range(q):
            a, b = queries[i]
            if a > b:
                a, b = b, a
            if a == b or heights[a] < heights[b]:
                result[i] = b
            else:
                deferred[b].append((heights[a], i))
        for i in range(n):
            for query in deferred[i]:
                heapq.heappush(pq, query)
            while pq and pq[0][0] < heights[i]:
                result[pq[0][1]] = i
                heapq.heappop(pq)
        return result

# Approach 2:
class Solution:
    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:
        res = [-1] * len(queries)

        groups = defaultdict(list)
        for i, q in enumerate(queries):
            l, r = sorted(q)

            if l == r or heights[r] > heights[l]:
                res[i] = r
            else:
                h = max(heights[l], heights[r])
                groups[r].append((h,i))

        min_heap = []
        for i, h in enumerate(heights):

            for q_h, q_i in groups[i]:
                heapq.heappush(min_heap, (q_h, q_i))

            while min_heap and h > min_heap[0][0]:
                q_h, q_i = heapq.heappop(min_heap)
                res[q_i] = i
        return res
