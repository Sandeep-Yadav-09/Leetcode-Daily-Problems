** 2182. Construct String With Repeat Limit **

# Approach 1:
class Solution:
    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:
        chars = sorted(s, reverse=True)
        
        result = []
        freq = 1
        pointer = 0
        
        for i in range(len(chars)):
            if result and result[-1] == chars[i]:
                if freq < repeatLimit:
                    result.append(chars[i])
                    freq += 1
                else:
                    pointer = max(pointer, i + 1)
                    while pointer < len(chars) and chars[pointer] == chars[i]:
                        pointer += 1
                    
                    if pointer < len(chars):
                        result.append(chars[pointer])
                        chars[i], chars[pointer] = chars[pointer], chars[i]
                        freq = 1
                    else:
                        break
            else:
                result.append(chars[i])
                freq = 1
        
        return ''.join(result)

# Approach 2:
class Solution:
    def repeatLimitedString(self, s: str, rl: int) -> str:
        h = [ (-ord(x), y) for x, y in Counter(s).items() ]        
        heapq.heapify(h)
        res = ""

        while h:
            x, y = heapq.heappop(h)
            while y > rl and h: 
                res += chr(-x) * rl
                y -= rl
                a, b = heapq.heappop(h)
                res += chr(-a)
                if (b-1) > 0: heapq.heappush(h, (a, b-1))
            res += chr(-x) * y

        if res:
            i = len(res)-1
            while i >= 0 and res[i] == res[-1]: i -= 1
            if len(res)-i-1 > rl: res = res[:i+1+rl]

        return res
