** 494. Target Sum **

# Approach 1:
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        total_sum = sum(nums)

        if target > total_sum or (total_sum - target) % 2 != 0:
            return 0

        s = (total_sum - target) // 2

        dp = [0] * (s + 1)
        dp[0] = 1 
        
        for num in nums:
            for j in range(s, num - 1, -1): 
                dp[j] += dp[j - num]

        return dp[s]

# Approach 2:
class Solution:
    def findTargetSumWays(self, a: List[int], target: int) -> int:
        @lru_cache(None)
        def dp(i, cur):
            if i == len(a): return cur == target
            return dp(i+1, cur+a[i]) + dp(i+1, cur-a[i])
        return dp(0, 0)
